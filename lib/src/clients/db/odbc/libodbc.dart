// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for ODBC
class LibOdbc {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibOdbc(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibOdbc.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int SQLAllocConnect(
    SQLHENV EnvironmentHandle,
    ffi.Pointer<SQLHDBC> ConnectionHandle,
  ) {
    return _SQLAllocConnect(
      EnvironmentHandle,
      ConnectionHandle,
    );
  }

  late final _SQLAllocConnectPtr = _lookup<
          ffi
          .NativeFunction<SQLRETURN Function(SQLHENV, ffi.Pointer<SQLHDBC>)>>(
      'SQLAllocConnect');
  late final _SQLAllocConnect = _SQLAllocConnectPtr.asFunction<
      int Function(SQLHENV, ffi.Pointer<SQLHDBC>)>();

  int SQLAllocEnv(
    ffi.Pointer<SQLHENV> EnvironmentHandle,
  ) {
    return _SQLAllocEnv(
      EnvironmentHandle,
    );
  }

  late final _SQLAllocEnvPtr =
      _lookup<ffi.NativeFunction<SQLRETURN Function(ffi.Pointer<SQLHENV>)>>(
          'SQLAllocEnv');
  late final _SQLAllocEnv =
      _SQLAllocEnvPtr.asFunction<int Function(ffi.Pointer<SQLHENV>)>();

  int SQLAllocHandle(
    int HandleType,
    SQLHANDLE InputHandle,
    ffi.Pointer<SQLHANDLE> OutputHandle,
  ) {
    return _SQLAllocHandle(
      HandleType,
      InputHandle,
      OutputHandle,
    );
  }

  late final _SQLAllocHandlePtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLSMALLINT, SQLHANDLE,
              ffi.Pointer<SQLHANDLE>)>>('SQLAllocHandle');
  late final _SQLAllocHandle = _SQLAllocHandlePtr.asFunction<
      int Function(int, SQLHANDLE, ffi.Pointer<SQLHANDLE>)>();

  int SQLAllocStmt(
    SQLHDBC ConnectionHandle,
    ffi.Pointer<SQLHSTMT> StatementHandle,
  ) {
    return _SQLAllocStmt(
      ConnectionHandle,
      StatementHandle,
    );
  }

  late final _SQLAllocStmtPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHDBC, ffi.Pointer<SQLHSTMT>)>>('SQLAllocStmt');
  late final _SQLAllocStmt = _SQLAllocStmtPtr.asFunction<
      int Function(SQLHDBC, ffi.Pointer<SQLHSTMT>)>();

  int SQLBindCol(
    SQLHSTMT StatementHandle,
    int ColumnNumber,
    int TargetType,
    SQLPOINTER TargetValue,
    int BufferLength,
    ffi.Pointer<SQLLEN> StrLen_or_Ind,
  ) {
    return _SQLBindCol(
      StatementHandle,
      ColumnNumber,
      TargetType,
      TargetValue,
      BufferLength,
      StrLen_or_Ind,
    );
  }

  late final _SQLBindColPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHSTMT, SQLUSMALLINT, SQLSMALLINT, SQLPOINTER,
              SQLLEN, ffi.Pointer<SQLLEN>)>>('SQLBindCol');
  late final _SQLBindCol = _SQLBindColPtr.asFunction<
      int Function(SQLHSTMT, int, int, SQLPOINTER, int, ffi.Pointer<SQLLEN>)>();

  int SQLBindParam(
    SQLHSTMT StatementHandle,
    int ParameterNumber,
    int ValueType,
    int ParameterType,
    int LengthPrecision,
    int ParameterScale,
    SQLPOINTER ParameterValue,
    ffi.Pointer<SQLLEN> StrLen_or_Ind,
  ) {
    return _SQLBindParam(
      StatementHandle,
      ParameterNumber,
      ValueType,
      ParameterType,
      LengthPrecision,
      ParameterScale,
      ParameterValue,
      StrLen_or_Ind,
    );
  }

  late final _SQLBindParamPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              SQLUSMALLINT,
              SQLSMALLINT,
              SQLSMALLINT,
              SQLULEN,
              SQLSMALLINT,
              SQLPOINTER,
              ffi.Pointer<SQLLEN>)>>('SQLBindParam');
  late final _SQLBindParam = _SQLBindParamPtr.asFunction<
      int Function(SQLHSTMT, int, int, int, int, int, SQLPOINTER,
          ffi.Pointer<SQLLEN>)>();

  int SQLCancel(
    SQLHSTMT StatementHandle,
  ) {
    return _SQLCancel(
      StatementHandle,
    );
  }

  late final _SQLCancelPtr =
      _lookup<ffi.NativeFunction<SQLRETURN Function(SQLHSTMT)>>('SQLCancel');
  late final _SQLCancel = _SQLCancelPtr.asFunction<int Function(SQLHSTMT)>();

  int SQLCancelHandle(
    int HandleType,
    SQLHANDLE InputHandle,
  ) {
    return _SQLCancelHandle(
      HandleType,
      InputHandle,
    );
  }

  late final _SQLCancelHandlePtr =
      _lookup<ffi.NativeFunction<SQLRETURN Function(SQLSMALLINT, SQLHANDLE)>>(
          'SQLCancelHandle');
  late final _SQLCancelHandle =
      _SQLCancelHandlePtr.asFunction<int Function(int, SQLHANDLE)>();

  int SQLCloseCursor(
    SQLHSTMT StatementHandle,
  ) {
    return _SQLCloseCursor(
      StatementHandle,
    );
  }

  late final _SQLCloseCursorPtr =
      _lookup<ffi.NativeFunction<SQLRETURN Function(SQLHSTMT)>>(
          'SQLCloseCursor');
  late final _SQLCloseCursor =
      _SQLCloseCursorPtr.asFunction<int Function(SQLHSTMT)>();

  int SQLColAttribute(
    SQLHSTMT StatementHandle,
    int ColumnNumber,
    int FieldIdentifier,
    SQLPOINTER CharacterAttribute,
    int BufferLength,
    ffi.Pointer<SQLSMALLINT> StringLength,
    ffi.Pointer<SQLLEN> NumericAttribute,
  ) {
    return _SQLColAttribute(
      StatementHandle,
      ColumnNumber,
      FieldIdentifier,
      CharacterAttribute,
      BufferLength,
      StringLength,
      NumericAttribute,
    );
  }

  late final _SQLColAttributePtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              SQLUSMALLINT,
              SQLUSMALLINT,
              SQLPOINTER,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLLEN>)>>('SQLColAttribute');
  late final _SQLColAttribute = _SQLColAttributePtr.asFunction<
      int Function(SQLHSTMT, int, int, SQLPOINTER, int,
          ffi.Pointer<SQLSMALLINT>, ffi.Pointer<SQLLEN>)>();

  int SQLColumns(
    SQLHSTMT StatementHandle,
    ffi.Pointer<SQLCHAR> CatalogName,
    int NameLength1,
    ffi.Pointer<SQLCHAR> SchemaName,
    int NameLength2,
    ffi.Pointer<SQLCHAR> TableName,
    int NameLength3,
    ffi.Pointer<SQLCHAR> ColumnName,
    int NameLength4,
  ) {
    return _SQLColumns(
      StatementHandle,
      CatalogName,
      NameLength1,
      SchemaName,
      NameLength2,
      TableName,
      NameLength3,
      ColumnName,
      NameLength4,
    );
  }

  late final _SQLColumnsPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT)>>('SQLColumns');
  late final _SQLColumns = _SQLColumnsPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>,
          int, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>, int)>();

  int SQLConnect(
    SQLHDBC ConnectionHandle,
    ffi.Pointer<SQLCHAR> ServerName,
    int NameLength1,
    ffi.Pointer<SQLCHAR> UserName,
    int NameLength2,
    ffi.Pointer<SQLCHAR> Authentication,
    int NameLength3,
  ) {
    return _SQLConnect(
      ConnectionHandle,
      ServerName,
      NameLength1,
      UserName,
      NameLength2,
      Authentication,
      NameLength3,
    );
  }

  late final _SQLConnectPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHDBC,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT)>>('SQLConnect');
  late final _SQLConnect = _SQLConnectPtr.asFunction<
      int Function(SQLHDBC, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>,
          int, ffi.Pointer<SQLCHAR>, int)>();

  int SQLCopyDesc(
    SQLHDESC SourceDescHandle,
    SQLHDESC TargetDescHandle,
  ) {
    return _SQLCopyDesc(
      SourceDescHandle,
      TargetDescHandle,
    );
  }

  late final _SQLCopyDescPtr =
      _lookup<ffi.NativeFunction<SQLRETURN Function(SQLHDESC, SQLHDESC)>>(
          'SQLCopyDesc');
  late final _SQLCopyDesc =
      _SQLCopyDescPtr.asFunction<int Function(SQLHDESC, SQLHDESC)>();

  int SQLDataSources(
    SQLHENV EnvironmentHandle,
    int Direction,
    ffi.Pointer<SQLCHAR> ServerName,
    int BufferLength1,
    ffi.Pointer<SQLSMALLINT> NameLength1,
    ffi.Pointer<SQLCHAR> Description,
    int BufferLength2,
    ffi.Pointer<SQLSMALLINT> NameLength2,
  ) {
    return _SQLDataSources(
      EnvironmentHandle,
      Direction,
      ServerName,
      BufferLength1,
      NameLength1,
      Description,
      BufferLength2,
      NameLength2,
    );
  }

  late final _SQLDataSourcesPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHENV,
              SQLUSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>)>>('SQLDataSources');
  late final _SQLDataSources = _SQLDataSourcesPtr.asFunction<
      int Function(
          SQLHENV,
          int,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLSMALLINT>)>();

  int SQLDescribeCol(
    SQLHSTMT StatementHandle,
    int ColumnNumber,
    ffi.Pointer<SQLCHAR> ColumnName,
    int BufferLength,
    ffi.Pointer<SQLSMALLINT> NameLength,
    ffi.Pointer<SQLSMALLINT> DataType,
    ffi.Pointer<SQLULEN> ColumnSize,
    ffi.Pointer<SQLSMALLINT> DecimalDigits,
    ffi.Pointer<SQLSMALLINT> Nullable,
  ) {
    return _SQLDescribeCol(
      StatementHandle,
      ColumnNumber,
      ColumnName,
      BufferLength,
      NameLength,
      DataType,
      ColumnSize,
      DecimalDigits,
      Nullable,
    );
  }

  late final _SQLDescribeColPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              SQLUSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLULEN>,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLSMALLINT>)>>('SQLDescribeCol');
  late final _SQLDescribeCol = _SQLDescribeColPtr.asFunction<
      int Function(
          SQLHSTMT,
          int,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLULEN>,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLSMALLINT>)>();

  int SQLDisconnect(
    SQLHDBC ConnectionHandle,
  ) {
    return _SQLDisconnect(
      ConnectionHandle,
    );
  }

  late final _SQLDisconnectPtr =
      _lookup<ffi.NativeFunction<SQLRETURN Function(SQLHDBC)>>('SQLDisconnect');
  late final _SQLDisconnect =
      _SQLDisconnectPtr.asFunction<int Function(SQLHDBC)>();

  int SQLEndTran(
    int HandleType,
    SQLHANDLE Handle,
    int CompletionType,
  ) {
    return _SQLEndTran(
      HandleType,
      Handle,
      CompletionType,
    );
  }

  late final _SQLEndTranPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLSMALLINT, SQLHANDLE, SQLSMALLINT)>>('SQLEndTran');
  late final _SQLEndTran =
      _SQLEndTranPtr.asFunction<int Function(int, SQLHANDLE, int)>();

  int SQLError(
    SQLHENV EnvironmentHandle,
    SQLHDBC ConnectionHandle,
    SQLHSTMT StatementHandle,
    ffi.Pointer<SQLCHAR> Sqlstate,
    ffi.Pointer<SQLINTEGER> NativeError,
    ffi.Pointer<SQLCHAR> MessageText,
    int BufferLength,
    ffi.Pointer<SQLSMALLINT> TextLength,
  ) {
    return _SQLError(
      EnvironmentHandle,
      ConnectionHandle,
      StatementHandle,
      Sqlstate,
      NativeError,
      MessageText,
      BufferLength,
      TextLength,
    );
  }

  late final _SQLErrorPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHENV,
              SQLHDBC,
              SQLHSTMT,
              ffi.Pointer<SQLCHAR>,
              ffi.Pointer<SQLINTEGER>,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>)>>('SQLError');
  late final _SQLError = _SQLErrorPtr.asFunction<
      int Function(
          SQLHENV,
          SQLHDBC,
          SQLHSTMT,
          ffi.Pointer<SQLCHAR>,
          ffi.Pointer<SQLINTEGER>,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLSMALLINT>)>();

  int SQLExecDirect(
    SQLHSTMT StatementHandle,
    ffi.Pointer<SQLCHAR> StatementText,
    int TextLength,
  ) {
    return _SQLExecDirect(
      StatementHandle,
      StatementText,
      TextLength,
    );
  }

  late final _SQLExecDirectPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT, ffi.Pointer<SQLCHAR>, SQLINTEGER)>>('SQLExecDirect');
  late final _SQLExecDirect = _SQLExecDirectPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLCHAR>, int)>();

  int SQLExecute(
    SQLHSTMT StatementHandle,
  ) {
    return _SQLExecute(
      StatementHandle,
    );
  }

  late final _SQLExecutePtr =
      _lookup<ffi.NativeFunction<SQLRETURN Function(SQLHSTMT)>>('SQLExecute');
  late final _SQLExecute = _SQLExecutePtr.asFunction<int Function(SQLHSTMT)>();

  int SQLFetch(
    SQLHSTMT StatementHandle,
  ) {
    return _SQLFetch(
      StatementHandle,
    );
  }

  late final _SQLFetchPtr =
      _lookup<ffi.NativeFunction<SQLRETURN Function(SQLHSTMT)>>('SQLFetch');
  late final _SQLFetch = _SQLFetchPtr.asFunction<int Function(SQLHSTMT)>();

  int SQLFetchScroll(
    SQLHSTMT StatementHandle,
    int FetchOrientation,
    int FetchOffset,
  ) {
    return _SQLFetchScroll(
      StatementHandle,
      FetchOrientation,
      FetchOffset,
    );
  }

  late final _SQLFetchScrollPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHSTMT, SQLSMALLINT, SQLLEN)>>('SQLFetchScroll');
  late final _SQLFetchScroll =
      _SQLFetchScrollPtr.asFunction<int Function(SQLHSTMT, int, int)>();

  int SQLFreeConnect(
    SQLHDBC ConnectionHandle,
  ) {
    return _SQLFreeConnect(
      ConnectionHandle,
    );
  }

  late final _SQLFreeConnectPtr =
      _lookup<ffi.NativeFunction<SQLRETURN Function(SQLHDBC)>>(
          'SQLFreeConnect');
  late final _SQLFreeConnect =
      _SQLFreeConnectPtr.asFunction<int Function(SQLHDBC)>();

  int SQLFreeEnv(
    SQLHENV EnvironmentHandle,
  ) {
    return _SQLFreeEnv(
      EnvironmentHandle,
    );
  }

  late final _SQLFreeEnvPtr =
      _lookup<ffi.NativeFunction<SQLRETURN Function(SQLHENV)>>('SQLFreeEnv');
  late final _SQLFreeEnv = _SQLFreeEnvPtr.asFunction<int Function(SQLHENV)>();

  int SQLFreeHandle(
    int HandleType,
    SQLHANDLE Handle,
  ) {
    return _SQLFreeHandle(
      HandleType,
      Handle,
    );
  }

  late final _SQLFreeHandlePtr =
      _lookup<ffi.NativeFunction<SQLRETURN Function(SQLSMALLINT, SQLHANDLE)>>(
          'SQLFreeHandle');
  late final _SQLFreeHandle =
      _SQLFreeHandlePtr.asFunction<int Function(int, SQLHANDLE)>();

  int SQLFreeStmt(
    SQLHSTMT StatementHandle,
    int Option,
  ) {
    return _SQLFreeStmt(
      StatementHandle,
      Option,
    );
  }

  late final _SQLFreeStmtPtr =
      _lookup<ffi.NativeFunction<SQLRETURN Function(SQLHSTMT, SQLUSMALLINT)>>(
          'SQLFreeStmt');
  late final _SQLFreeStmt =
      _SQLFreeStmtPtr.asFunction<int Function(SQLHSTMT, int)>();

  int SQLGetConnectAttr(
    SQLHDBC ConnectionHandle,
    int Attribute,
    SQLPOINTER Value,
    int BufferLength,
    ffi.Pointer<SQLINTEGER> StringLength,
  ) {
    return _SQLGetConnectAttr(
      ConnectionHandle,
      Attribute,
      Value,
      BufferLength,
      StringLength,
    );
  }

  late final _SQLGetConnectAttrPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHDBC, SQLINTEGER, SQLPOINTER, SQLINTEGER,
              ffi.Pointer<SQLINTEGER>)>>('SQLGetConnectAttr');
  late final _SQLGetConnectAttr = _SQLGetConnectAttrPtr.asFunction<
      int Function(SQLHDBC, int, SQLPOINTER, int, ffi.Pointer<SQLINTEGER>)>();

  int SQLGetConnectOption(
    SQLHDBC ConnectionHandle,
    int Option,
    SQLPOINTER Value,
  ) {
    return _SQLGetConnectOption(
      ConnectionHandle,
      Option,
      Value,
    );
  }

  late final _SQLGetConnectOptionPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHDBC, SQLUSMALLINT, SQLPOINTER)>>('SQLGetConnectOption');
  late final _SQLGetConnectOption = _SQLGetConnectOptionPtr.asFunction<
      int Function(SQLHDBC, int, SQLPOINTER)>();

  int SQLGetCursorName(
    SQLHSTMT StatementHandle,
    ffi.Pointer<SQLCHAR> CursorName,
    int BufferLength,
    ffi.Pointer<SQLSMALLINT> NameLength,
  ) {
    return _SQLGetCursorName(
      StatementHandle,
      CursorName,
      BufferLength,
      NameLength,
    );
  }

  late final _SQLGetCursorNamePtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHSTMT, ffi.Pointer<SQLCHAR>, SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>)>>('SQLGetCursorName');
  late final _SQLGetCursorName = _SQLGetCursorNamePtr.asFunction<
      int Function(
          SQLHSTMT, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLSMALLINT>)>();

  int SQLGetData(
    SQLHSTMT StatementHandle,
    int ColumnNumber,
    int TargetType,
    SQLPOINTER TargetValue,
    int BufferLength,
    ffi.Pointer<SQLLEN> StrLen_or_Ind,
  ) {
    return _SQLGetData(
      StatementHandle,
      ColumnNumber,
      TargetType,
      TargetValue,
      BufferLength,
      StrLen_or_Ind,
    );
  }

  late final _SQLGetDataPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHSTMT, SQLUSMALLINT, SQLSMALLINT, SQLPOINTER,
              SQLLEN, ffi.Pointer<SQLLEN>)>>('SQLGetData');
  late final _SQLGetData = _SQLGetDataPtr.asFunction<
      int Function(SQLHSTMT, int, int, SQLPOINTER, int, ffi.Pointer<SQLLEN>)>();

  int SQLGetDescField(
    SQLHDESC DescriptorHandle,
    int RecNumber,
    int FieldIdentifier,
    SQLPOINTER Value,
    int BufferLength,
    ffi.Pointer<SQLINTEGER> StringLength,
  ) {
    return _SQLGetDescField(
      DescriptorHandle,
      RecNumber,
      FieldIdentifier,
      Value,
      BufferLength,
      StringLength,
    );
  }

  late final _SQLGetDescFieldPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHDESC, SQLSMALLINT, SQLSMALLINT, SQLPOINTER,
              SQLINTEGER, ffi.Pointer<SQLINTEGER>)>>('SQLGetDescField');
  late final _SQLGetDescField = _SQLGetDescFieldPtr.asFunction<
      int Function(
          SQLHDESC, int, int, SQLPOINTER, int, ffi.Pointer<SQLINTEGER>)>();

  int SQLGetDescRec(
    SQLHDESC DescriptorHandle,
    int RecNumber,
    ffi.Pointer<SQLCHAR> Name,
    int BufferLength,
    ffi.Pointer<SQLSMALLINT> StringLength,
    ffi.Pointer<SQLSMALLINT> Type,
    ffi.Pointer<SQLSMALLINT> SubType,
    ffi.Pointer<SQLLEN> Length,
    ffi.Pointer<SQLSMALLINT> Precision,
    ffi.Pointer<SQLSMALLINT> Scale,
    ffi.Pointer<SQLSMALLINT> Nullable,
  ) {
    return _SQLGetDescRec(
      DescriptorHandle,
      RecNumber,
      Name,
      BufferLength,
      StringLength,
      Type,
      SubType,
      Length,
      Precision,
      Scale,
      Nullable,
    );
  }

  late final _SQLGetDescRecPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHDESC,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLLEN>,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLSMALLINT>)>>('SQLGetDescRec');
  late final _SQLGetDescRec = _SQLGetDescRecPtr.asFunction<
      int Function(
          SQLHDESC,
          int,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLLEN>,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLSMALLINT>)>();

  int SQLGetDiagField(
    int HandleType,
    SQLHANDLE Handle,
    int RecNumber,
    int DiagIdentifier,
    SQLPOINTER DiagInfo,
    int BufferLength,
    ffi.Pointer<SQLSMALLINT> StringLength,
  ) {
    return _SQLGetDiagField(
      HandleType,
      Handle,
      RecNumber,
      DiagIdentifier,
      DiagInfo,
      BufferLength,
      StringLength,
    );
  }

  late final _SQLGetDiagFieldPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLSMALLINT,
              SQLHANDLE,
              SQLSMALLINT,
              SQLSMALLINT,
              SQLPOINTER,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>)>>('SQLGetDiagField');
  late final _SQLGetDiagField = _SQLGetDiagFieldPtr.asFunction<
      int Function(int, SQLHANDLE, int, int, SQLPOINTER, int,
          ffi.Pointer<SQLSMALLINT>)>();

  int SQLGetDiagRec(
    int HandleType,
    SQLHANDLE Handle,
    int RecNumber,
    ffi.Pointer<SQLCHAR> Sqlstate,
    ffi.Pointer<SQLINTEGER> NativeError,
    ffi.Pointer<SQLCHAR> MessageText,
    int BufferLength,
    ffi.Pointer<SQLSMALLINT> TextLength,
  ) {
    return _SQLGetDiagRec(
      HandleType,
      Handle,
      RecNumber,
      Sqlstate,
      NativeError,
      MessageText,
      BufferLength,
      TextLength,
    );
  }

  late final _SQLGetDiagRecPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLSMALLINT,
              SQLHANDLE,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              ffi.Pointer<SQLINTEGER>,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>)>>('SQLGetDiagRec');
  late final _SQLGetDiagRec = _SQLGetDiagRecPtr.asFunction<
      int Function(
          int,
          SQLHANDLE,
          int,
          ffi.Pointer<SQLCHAR>,
          ffi.Pointer<SQLINTEGER>,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLSMALLINT>)>();

  int SQLGetEnvAttr(
    SQLHENV EnvironmentHandle,
    int Attribute,
    SQLPOINTER Value,
    int BufferLength,
    ffi.Pointer<SQLINTEGER> StringLength,
  ) {
    return _SQLGetEnvAttr(
      EnvironmentHandle,
      Attribute,
      Value,
      BufferLength,
      StringLength,
    );
  }

  late final _SQLGetEnvAttrPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHENV, SQLINTEGER, SQLPOINTER, SQLINTEGER,
              ffi.Pointer<SQLINTEGER>)>>('SQLGetEnvAttr');
  late final _SQLGetEnvAttr = _SQLGetEnvAttrPtr.asFunction<
      int Function(SQLHENV, int, SQLPOINTER, int, ffi.Pointer<SQLINTEGER>)>();

  int SQLGetFunctions(
    SQLHDBC ConnectionHandle,
    int FunctionId,
    ffi.Pointer<SQLUSMALLINT> Supported,
  ) {
    return _SQLGetFunctions(
      ConnectionHandle,
      FunctionId,
      Supported,
    );
  }

  late final _SQLGetFunctionsPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHDBC, SQLUSMALLINT,
              ffi.Pointer<SQLUSMALLINT>)>>('SQLGetFunctions');
  late final _SQLGetFunctions = _SQLGetFunctionsPtr.asFunction<
      int Function(SQLHDBC, int, ffi.Pointer<SQLUSMALLINT>)>();

  int SQLGetInfo(
    SQLHDBC ConnectionHandle,
    int InfoType,
    SQLPOINTER InfoValue,
    int BufferLength,
    ffi.Pointer<SQLSMALLINT> StringLength,
  ) {
    return _SQLGetInfo(
      ConnectionHandle,
      InfoType,
      InfoValue,
      BufferLength,
      StringLength,
    );
  }

  late final _SQLGetInfoPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHDBC, SQLUSMALLINT, SQLPOINTER, SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>)>>('SQLGetInfo');
  late final _SQLGetInfo = _SQLGetInfoPtr.asFunction<
      int Function(SQLHDBC, int, SQLPOINTER, int, ffi.Pointer<SQLSMALLINT>)>();

  int SQLGetStmtAttr(
    SQLHSTMT StatementHandle,
    int Attribute,
    SQLPOINTER Value,
    int BufferLength,
    ffi.Pointer<SQLINTEGER> StringLength,
  ) {
    return _SQLGetStmtAttr(
      StatementHandle,
      Attribute,
      Value,
      BufferLength,
      StringLength,
    );
  }

  late final _SQLGetStmtAttrPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHSTMT, SQLINTEGER, SQLPOINTER, SQLINTEGER,
              ffi.Pointer<SQLINTEGER>)>>('SQLGetStmtAttr');
  late final _SQLGetStmtAttr = _SQLGetStmtAttrPtr.asFunction<
      int Function(SQLHSTMT, int, SQLPOINTER, int, ffi.Pointer<SQLINTEGER>)>();

  int SQLGetStmtOption(
    SQLHSTMT StatementHandle,
    int Option,
    SQLPOINTER Value,
  ) {
    return _SQLGetStmtOption(
      StatementHandle,
      Option,
      Value,
    );
  }

  late final _SQLGetStmtOptionPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT, SQLUSMALLINT, SQLPOINTER)>>('SQLGetStmtOption');
  late final _SQLGetStmtOption = _SQLGetStmtOptionPtr.asFunction<
      int Function(SQLHSTMT, int, SQLPOINTER)>();

  int SQLGetTypeInfo(
    SQLHSTMT StatementHandle,
    int DataType,
  ) {
    return _SQLGetTypeInfo(
      StatementHandle,
      DataType,
    );
  }

  late final _SQLGetTypeInfoPtr =
      _lookup<ffi.NativeFunction<SQLRETURN Function(SQLHSTMT, SQLSMALLINT)>>(
          'SQLGetTypeInfo');
  late final _SQLGetTypeInfo =
      _SQLGetTypeInfoPtr.asFunction<int Function(SQLHSTMT, int)>();

  int SQLNumResultCols(
    SQLHSTMT StatementHandle,
    ffi.Pointer<SQLSMALLINT> ColumnCount,
  ) {
    return _SQLNumResultCols(
      StatementHandle,
      ColumnCount,
    );
  }

  late final _SQLNumResultColsPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT, ffi.Pointer<SQLSMALLINT>)>>('SQLNumResultCols');
  late final _SQLNumResultCols = _SQLNumResultColsPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLSMALLINT>)>();

  int SQLParamData(
    SQLHSTMT StatementHandle,
    ffi.Pointer<SQLPOINTER> Value,
  ) {
    return _SQLParamData(
      StatementHandle,
      Value,
    );
  }

  late final _SQLParamDataPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT, ffi.Pointer<SQLPOINTER>)>>('SQLParamData');
  late final _SQLParamData = _SQLParamDataPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLPOINTER>)>();

  int SQLPrepare(
    SQLHSTMT StatementHandle,
    ffi.Pointer<SQLCHAR> StatementText,
    int TextLength,
  ) {
    return _SQLPrepare(
      StatementHandle,
      StatementText,
      TextLength,
    );
  }

  late final _SQLPreparePtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT, ffi.Pointer<SQLCHAR>, SQLINTEGER)>>('SQLPrepare');
  late final _SQLPrepare = _SQLPreparePtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLCHAR>, int)>();

  int SQLPutData(
    SQLHSTMT StatementHandle,
    SQLPOINTER Data,
    int StrLen_or_Ind,
  ) {
    return _SQLPutData(
      StatementHandle,
      Data,
      StrLen_or_Ind,
    );
  }

  late final _SQLPutDataPtr = _lookup<
          ffi.NativeFunction<SQLRETURN Function(SQLHSTMT, SQLPOINTER, SQLLEN)>>(
      'SQLPutData');
  late final _SQLPutData =
      _SQLPutDataPtr.asFunction<int Function(SQLHSTMT, SQLPOINTER, int)>();

  int SQLRowCount(
    SQLHSTMT StatementHandle,
    ffi.Pointer<SQLLEN> RowCount,
  ) {
    return _SQLRowCount(
      StatementHandle,
      RowCount,
    );
  }

  late final _SQLRowCountPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHSTMT, ffi.Pointer<SQLLEN>)>>('SQLRowCount');
  late final _SQLRowCount =
      _SQLRowCountPtr.asFunction<int Function(SQLHSTMT, ffi.Pointer<SQLLEN>)>();

  int SQLSetConnectAttr(
    SQLHDBC ConnectionHandle,
    int Attribute,
    SQLPOINTER Value,
    int StringLength,
  ) {
    return _SQLSetConnectAttr(
      ConnectionHandle,
      Attribute,
      Value,
      StringLength,
    );
  }

  late final _SQLSetConnectAttrPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHDBC, SQLINTEGER, SQLPOINTER,
              SQLINTEGER)>>('SQLSetConnectAttr');
  late final _SQLSetConnectAttr = _SQLSetConnectAttrPtr.asFunction<
      int Function(SQLHDBC, int, SQLPOINTER, int)>();

  int SQLSetConnectOption(
    SQLHDBC ConnectionHandle,
    int Option,
    int Value,
  ) {
    return _SQLSetConnectOption(
      ConnectionHandle,
      Option,
      Value,
    );
  }

  late final _SQLSetConnectOptionPtr = _lookup<
          ffi
          .NativeFunction<SQLRETURN Function(SQLHDBC, SQLUSMALLINT, SQLULEN)>>(
      'SQLSetConnectOption');
  late final _SQLSetConnectOption =
      _SQLSetConnectOptionPtr.asFunction<int Function(SQLHDBC, int, int)>();

  int SQLSetCursorName(
    SQLHSTMT StatementHandle,
    ffi.Pointer<SQLCHAR> CursorName,
    int NameLength,
  ) {
    return _SQLSetCursorName(
      StatementHandle,
      CursorName,
      NameLength,
    );
  }

  late final _SQLSetCursorNamePtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHSTMT, ffi.Pointer<SQLCHAR>,
              SQLSMALLINT)>>('SQLSetCursorName');
  late final _SQLSetCursorName = _SQLSetCursorNamePtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLCHAR>, int)>();

  int SQLSetDescField(
    SQLHDESC DescriptorHandle,
    int RecNumber,
    int FieldIdentifier,
    SQLPOINTER Value,
    int BufferLength,
  ) {
    return _SQLSetDescField(
      DescriptorHandle,
      RecNumber,
      FieldIdentifier,
      Value,
      BufferLength,
    );
  }

  late final _SQLSetDescFieldPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHDESC, SQLSMALLINT, SQLSMALLINT, SQLPOINTER,
              SQLINTEGER)>>('SQLSetDescField');
  late final _SQLSetDescField = _SQLSetDescFieldPtr.asFunction<
      int Function(SQLHDESC, int, int, SQLPOINTER, int)>();

  int SQLSetDescRec(
    SQLHDESC DescriptorHandle,
    int RecNumber,
    int Type,
    int SubType,
    int Length,
    int Precision,
    int Scale,
    SQLPOINTER Data,
    ffi.Pointer<SQLLEN> StringLength,
    ffi.Pointer<SQLLEN> Indicator,
  ) {
    return _SQLSetDescRec(
      DescriptorHandle,
      RecNumber,
      Type,
      SubType,
      Length,
      Precision,
      Scale,
      Data,
      StringLength,
      Indicator,
    );
  }

  late final _SQLSetDescRecPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHDESC,
              SQLSMALLINT,
              SQLSMALLINT,
              SQLSMALLINT,
              SQLLEN,
              SQLSMALLINT,
              SQLSMALLINT,
              SQLPOINTER,
              ffi.Pointer<SQLLEN>,
              ffi.Pointer<SQLLEN>)>>('SQLSetDescRec');
  late final _SQLSetDescRec = _SQLSetDescRecPtr.asFunction<
      int Function(SQLHDESC, int, int, int, int, int, int, SQLPOINTER,
          ffi.Pointer<SQLLEN>, ffi.Pointer<SQLLEN>)>();

  int SQLSetEnvAttr(
    SQLHENV EnvironmentHandle,
    int Attribute,
    SQLPOINTER Value,
    int StringLength,
  ) {
    return _SQLSetEnvAttr(
      EnvironmentHandle,
      Attribute,
      Value,
      StringLength,
    );
  }

  late final _SQLSetEnvAttrPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHENV, SQLINTEGER, SQLPOINTER, SQLINTEGER)>>('SQLSetEnvAttr');
  late final _SQLSetEnvAttr = _SQLSetEnvAttrPtr.asFunction<
      int Function(SQLHENV, int, SQLPOINTER, int)>();

  int SQLSetParam(
    SQLHSTMT StatementHandle,
    int ParameterNumber,
    int ValueType,
    int ParameterType,
    int LengthPrecision,
    int ParameterScale,
    SQLPOINTER ParameterValue,
    ffi.Pointer<SQLLEN> StrLen_or_Ind,
  ) {
    return _SQLSetParam(
      StatementHandle,
      ParameterNumber,
      ValueType,
      ParameterType,
      LengthPrecision,
      ParameterScale,
      ParameterValue,
      StrLen_or_Ind,
    );
  }

  late final _SQLSetParamPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              SQLUSMALLINT,
              SQLSMALLINT,
              SQLSMALLINT,
              SQLULEN,
              SQLSMALLINT,
              SQLPOINTER,
              ffi.Pointer<SQLLEN>)>>('SQLSetParam');
  late final _SQLSetParam = _SQLSetParamPtr.asFunction<
      int Function(SQLHSTMT, int, int, int, int, int, SQLPOINTER,
          ffi.Pointer<SQLLEN>)>();

  int SQLSetStmtAttr(
    SQLHSTMT StatementHandle,
    int Attribute,
    SQLPOINTER Value,
    int StringLength,
  ) {
    return _SQLSetStmtAttr(
      StatementHandle,
      Attribute,
      Value,
      StringLength,
    );
  }

  late final _SQLSetStmtAttrPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT, SQLINTEGER, SQLPOINTER, SQLINTEGER)>>('SQLSetStmtAttr');
  late final _SQLSetStmtAttr = _SQLSetStmtAttrPtr.asFunction<
      int Function(SQLHSTMT, int, SQLPOINTER, int)>();

  int SQLSetStmtOption(
    SQLHSTMT StatementHandle,
    int Option,
    int Value,
  ) {
    return _SQLSetStmtOption(
      StatementHandle,
      Option,
      Value,
    );
  }

  late final _SQLSetStmtOptionPtr = _lookup<
          ffi
          .NativeFunction<SQLRETURN Function(SQLHSTMT, SQLUSMALLINT, SQLULEN)>>(
      'SQLSetStmtOption');
  late final _SQLSetStmtOption =
      _SQLSetStmtOptionPtr.asFunction<int Function(SQLHSTMT, int, int)>();

  int SQLSpecialColumns(
    SQLHSTMT StatementHandle,
    int IdentifierType,
    ffi.Pointer<SQLCHAR> CatalogName,
    int NameLength1,
    ffi.Pointer<SQLCHAR> SchemaName,
    int NameLength2,
    ffi.Pointer<SQLCHAR> TableName,
    int NameLength3,
    int Scope,
    int Nullable,
  ) {
    return _SQLSpecialColumns(
      StatementHandle,
      IdentifierType,
      CatalogName,
      NameLength1,
      SchemaName,
      NameLength2,
      TableName,
      NameLength3,
      Scope,
      Nullable,
    );
  }

  late final _SQLSpecialColumnsPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              SQLUSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              SQLUSMALLINT,
              SQLUSMALLINT)>>('SQLSpecialColumns');
  late final _SQLSpecialColumns = _SQLSpecialColumnsPtr.asFunction<
      int Function(SQLHSTMT, int, ffi.Pointer<SQLCHAR>, int,
          ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>, int, int, int)>();

  int SQLStatistics(
    SQLHSTMT StatementHandle,
    ffi.Pointer<SQLCHAR> CatalogName,
    int NameLength1,
    ffi.Pointer<SQLCHAR> SchemaName,
    int NameLength2,
    ffi.Pointer<SQLCHAR> TableName,
    int NameLength3,
    int Unique,
    int Reserved,
  ) {
    return _SQLStatistics(
      StatementHandle,
      CatalogName,
      NameLength1,
      SchemaName,
      NameLength2,
      TableName,
      NameLength3,
      Unique,
      Reserved,
    );
  }

  late final _SQLStatisticsPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              SQLUSMALLINT,
              SQLUSMALLINT)>>('SQLStatistics');
  late final _SQLStatistics = _SQLStatisticsPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>,
          int, ffi.Pointer<SQLCHAR>, int, int, int)>();

  int SQLTables(
    SQLHSTMT StatementHandle,
    ffi.Pointer<SQLCHAR> CatalogName,
    int NameLength1,
    ffi.Pointer<SQLCHAR> SchemaName,
    int NameLength2,
    ffi.Pointer<SQLCHAR> TableName,
    int NameLength3,
    ffi.Pointer<SQLCHAR> TableType,
    int NameLength4,
  ) {
    return _SQLTables(
      StatementHandle,
      CatalogName,
      NameLength1,
      SchemaName,
      NameLength2,
      TableName,
      NameLength3,
      TableType,
      NameLength4,
    );
  }

  late final _SQLTablesPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT)>>('SQLTables');
  late final _SQLTables = _SQLTablesPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>,
          int, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>, int)>();

  int SQLTransact(
    SQLHENV EnvironmentHandle,
    SQLHDBC ConnectionHandle,
    int CompletionType,
  ) {
    return _SQLTransact(
      EnvironmentHandle,
      ConnectionHandle,
      CompletionType,
    );
  }

  late final _SQLTransactPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHENV, SQLHDBC, SQLUSMALLINT)>>('SQLTransact');
  late final _SQLTransact =
      _SQLTransactPtr.asFunction<int Function(SQLHENV, SQLHDBC, int)>();

  int SQLDriverConnect(
    SQLHDBC hdbc,
    SQLHWND hwnd,
    ffi.Pointer<SQLCHAR> szConnStrIn,
    int cbConnStrIn,
    ffi.Pointer<SQLCHAR> szConnStrOut,
    int cbConnStrOutMax,
    ffi.Pointer<SQLSMALLINT> pcbConnStrOut,
    int fDriverCompletion,
  ) {
    return _SQLDriverConnect(
      hdbc,
      hwnd,
      szConnStrIn,
      cbConnStrIn,
      szConnStrOut,
      cbConnStrOutMax,
      pcbConnStrOut,
      fDriverCompletion,
    );
  }

  late final _SQLDriverConnectPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHDBC,
              SQLHWND,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>,
              SQLUSMALLINT)>>('SQLDriverConnect');
  late final _SQLDriverConnect = _SQLDriverConnectPtr.asFunction<
      int Function(SQLHDBC, SQLHWND, ffi.Pointer<SQLCHAR>, int,
          ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLSMALLINT>, int)>();

  int SQLBrowseConnect(
    SQLHDBC hdbc,
    ffi.Pointer<SQLCHAR> szConnStrIn,
    int cbConnStrIn,
    ffi.Pointer<SQLCHAR> szConnStrOut,
    int cbConnStrOutMax,
    ffi.Pointer<SQLSMALLINT> pcbConnStrOut,
  ) {
    return _SQLBrowseConnect(
      hdbc,
      szConnStrIn,
      cbConnStrIn,
      szConnStrOut,
      cbConnStrOutMax,
      pcbConnStrOut,
    );
  }

  late final _SQLBrowseConnectPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHDBC,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>)>>('SQLBrowseConnect');
  late final _SQLBrowseConnect = _SQLBrowseConnectPtr.asFunction<
      int Function(SQLHDBC, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>,
          int, ffi.Pointer<SQLSMALLINT>)>();

  int SQLBulkOperations(
    SQLHSTMT StatementHandle,
    int Operation,
  ) {
    return _SQLBulkOperations(
      StatementHandle,
      Operation,
    );
  }

  late final _SQLBulkOperationsPtr =
      _lookup<ffi.NativeFunction<SQLRETURN Function(SQLHSTMT, SQLSMALLINT)>>(
          'SQLBulkOperations');
  late final _SQLBulkOperations =
      _SQLBulkOperationsPtr.asFunction<int Function(SQLHSTMT, int)>();

  int SQLColAttributes(
    SQLHSTMT hstmt,
    int icol,
    int fDescType,
    SQLPOINTER rgbDesc,
    int cbDescMax,
    ffi.Pointer<SQLSMALLINT> pcbDesc,
    ffi.Pointer<SQLLEN> pfDesc,
  ) {
    return _SQLColAttributes(
      hstmt,
      icol,
      fDescType,
      rgbDesc,
      cbDescMax,
      pcbDesc,
      pfDesc,
    );
  }

  late final _SQLColAttributesPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              SQLUSMALLINT,
              SQLUSMALLINT,
              SQLPOINTER,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLLEN>)>>('SQLColAttributes');
  late final _SQLColAttributes = _SQLColAttributesPtr.asFunction<
      int Function(SQLHSTMT, int, int, SQLPOINTER, int,
          ffi.Pointer<SQLSMALLINT>, ffi.Pointer<SQLLEN>)>();

  int SQLColumnPrivileges(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLCHAR> szCatalogName,
    int cbCatalogName,
    ffi.Pointer<SQLCHAR> szSchemaName,
    int cbSchemaName,
    ffi.Pointer<SQLCHAR> szTableName,
    int cbTableName,
    ffi.Pointer<SQLCHAR> szColumnName,
    int cbColumnName,
  ) {
    return _SQLColumnPrivileges(
      hstmt,
      szCatalogName,
      cbCatalogName,
      szSchemaName,
      cbSchemaName,
      szTableName,
      cbTableName,
      szColumnName,
      cbColumnName,
    );
  }

  late final _SQLColumnPrivilegesPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT)>>('SQLColumnPrivileges');
  late final _SQLColumnPrivileges = _SQLColumnPrivilegesPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>,
          int, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>, int)>();

  int SQLDescribeParam(
    SQLHSTMT hstmt,
    int ipar,
    ffi.Pointer<SQLSMALLINT> pfSqlType,
    ffi.Pointer<SQLULEN> pcbParamDef,
    ffi.Pointer<SQLSMALLINT> pibScale,
    ffi.Pointer<SQLSMALLINT> pfNullable,
  ) {
    return _SQLDescribeParam(
      hstmt,
      ipar,
      pfSqlType,
      pcbParamDef,
      pibScale,
      pfNullable,
    );
  }

  late final _SQLDescribeParamPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              SQLUSMALLINT,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLULEN>,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLSMALLINT>)>>('SQLDescribeParam');
  late final _SQLDescribeParam = _SQLDescribeParamPtr.asFunction<
      int Function(
          SQLHSTMT,
          int,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLULEN>,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLSMALLINT>)>();

  int SQLExtendedFetch(
    SQLHSTMT hstmt,
    int fFetchType,
    int irow,
    ffi.Pointer<SQLULEN> pcrow,
    ffi.Pointer<SQLUSMALLINT> rgfRowStatus,
  ) {
    return _SQLExtendedFetch(
      hstmt,
      fFetchType,
      irow,
      pcrow,
      rgfRowStatus,
    );
  }

  late final _SQLExtendedFetchPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              SQLUSMALLINT,
              SQLLEN,
              ffi.Pointer<SQLULEN>,
              ffi.Pointer<SQLUSMALLINT>)>>('SQLExtendedFetch');
  late final _SQLExtendedFetch = _SQLExtendedFetchPtr.asFunction<
      int Function(SQLHSTMT, int, int, ffi.Pointer<SQLULEN>,
          ffi.Pointer<SQLUSMALLINT>)>();

  int SQLForeignKeys(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLCHAR> szPkCatalogName,
    int cbPkCatalogName,
    ffi.Pointer<SQLCHAR> szPkSchemaName,
    int cbPkSchemaName,
    ffi.Pointer<SQLCHAR> szPkTableName,
    int cbPkTableName,
    ffi.Pointer<SQLCHAR> szFkCatalogName,
    int cbFkCatalogName,
    ffi.Pointer<SQLCHAR> szFkSchemaName,
    int cbFkSchemaName,
    ffi.Pointer<SQLCHAR> szFkTableName,
    int cbFkTableName,
  ) {
    return _SQLForeignKeys(
      hstmt,
      szPkCatalogName,
      cbPkCatalogName,
      szPkSchemaName,
      cbPkSchemaName,
      szPkTableName,
      cbPkTableName,
      szFkCatalogName,
      cbFkCatalogName,
      szFkSchemaName,
      cbFkSchemaName,
      szFkTableName,
      cbFkTableName,
    );
  }

  late final _SQLForeignKeysPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT)>>('SQLForeignKeys');
  late final _SQLForeignKeys = _SQLForeignKeysPtr.asFunction<
      int Function(
          SQLHSTMT,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLCHAR>,
          int)>();

  int SQLMoreResults(
    SQLHSTMT hstmt,
  ) {
    return _SQLMoreResults(
      hstmt,
    );
  }

  late final _SQLMoreResultsPtr =
      _lookup<ffi.NativeFunction<SQLRETURN Function(SQLHSTMT)>>(
          'SQLMoreResults');
  late final _SQLMoreResults =
      _SQLMoreResultsPtr.asFunction<int Function(SQLHSTMT)>();

  int SQLNativeSql(
    SQLHDBC hdbc,
    ffi.Pointer<SQLCHAR> szSqlStrIn,
    int cbSqlStrIn,
    ffi.Pointer<SQLCHAR> szSqlStr,
    int cbSqlStrMax,
    ffi.Pointer<SQLINTEGER> pcbSqlStr,
  ) {
    return _SQLNativeSql(
      hdbc,
      szSqlStrIn,
      cbSqlStrIn,
      szSqlStr,
      cbSqlStrMax,
      pcbSqlStr,
    );
  }

  late final _SQLNativeSqlPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHDBC,
              ffi.Pointer<SQLCHAR>,
              SQLINTEGER,
              ffi.Pointer<SQLCHAR>,
              SQLINTEGER,
              ffi.Pointer<SQLINTEGER>)>>('SQLNativeSql');
  late final _SQLNativeSql = _SQLNativeSqlPtr.asFunction<
      int Function(SQLHDBC, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>,
          int, ffi.Pointer<SQLINTEGER>)>();

  int SQLNumParams(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLSMALLINT> pcpar,
  ) {
    return _SQLNumParams(
      hstmt,
      pcpar,
    );
  }

  late final _SQLNumParamsPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT, ffi.Pointer<SQLSMALLINT>)>>('SQLNumParams');
  late final _SQLNumParams = _SQLNumParamsPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLSMALLINT>)>();

  int SQLParamOptions(
    SQLHSTMT hstmt,
    int crow,
    ffi.Pointer<SQLULEN> pirow,
  ) {
    return _SQLParamOptions(
      hstmt,
      crow,
      pirow,
    );
  }

  late final _SQLParamOptionsPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT, SQLULEN, ffi.Pointer<SQLULEN>)>>('SQLParamOptions');
  late final _SQLParamOptions = _SQLParamOptionsPtr.asFunction<
      int Function(SQLHSTMT, int, ffi.Pointer<SQLULEN>)>();

  int SQLPrimaryKeys(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLCHAR> szCatalogName,
    int cbCatalogName,
    ffi.Pointer<SQLCHAR> szSchemaName,
    int cbSchemaName,
    ffi.Pointer<SQLCHAR> szTableName,
    int cbTableName,
  ) {
    return _SQLPrimaryKeys(
      hstmt,
      szCatalogName,
      cbCatalogName,
      szSchemaName,
      cbSchemaName,
      szTableName,
      cbTableName,
    );
  }

  late final _SQLPrimaryKeysPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT)>>('SQLPrimaryKeys');
  late final _SQLPrimaryKeys = _SQLPrimaryKeysPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>,
          int, ffi.Pointer<SQLCHAR>, int)>();

  int SQLProcedureColumns(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLCHAR> szCatalogName,
    int cbCatalogName,
    ffi.Pointer<SQLCHAR> szSchemaName,
    int cbSchemaName,
    ffi.Pointer<SQLCHAR> szProcName,
    int cbProcName,
    ffi.Pointer<SQLCHAR> szColumnName,
    int cbColumnName,
  ) {
    return _SQLProcedureColumns(
      hstmt,
      szCatalogName,
      cbCatalogName,
      szSchemaName,
      cbSchemaName,
      szProcName,
      cbProcName,
      szColumnName,
      cbColumnName,
    );
  }

  late final _SQLProcedureColumnsPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT)>>('SQLProcedureColumns');
  late final _SQLProcedureColumns = _SQLProcedureColumnsPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>,
          int, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>, int)>();

  int SQLProcedures(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLCHAR> szCatalogName,
    int cbCatalogName,
    ffi.Pointer<SQLCHAR> szSchemaName,
    int cbSchemaName,
    ffi.Pointer<SQLCHAR> szProcName,
    int cbProcName,
  ) {
    return _SQLProcedures(
      hstmt,
      szCatalogName,
      cbCatalogName,
      szSchemaName,
      cbSchemaName,
      szProcName,
      cbProcName,
    );
  }

  late final _SQLProceduresPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT)>>('SQLProcedures');
  late final _SQLProcedures = _SQLProceduresPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>,
          int, ffi.Pointer<SQLCHAR>, int)>();

  int SQLSetPos(
    SQLHSTMT hstmt,
    int irow,
    int fOption,
    int fLock,
  ) {
    return _SQLSetPos(
      hstmt,
      irow,
      fOption,
      fLock,
    );
  }

  late final _SQLSetPosPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHSTMT, SQLSETPOSIROW, SQLUSMALLINT,
              SQLUSMALLINT)>>('SQLSetPos');
  late final _SQLSetPos =
      _SQLSetPosPtr.asFunction<int Function(SQLHSTMT, int, int, int)>();

  int SQLTablePrivileges(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLCHAR> szCatalogName,
    int cbCatalogName,
    ffi.Pointer<SQLCHAR> szSchemaName,
    int cbSchemaName,
    ffi.Pointer<SQLCHAR> szTableName,
    int cbTableName,
  ) {
    return _SQLTablePrivileges(
      hstmt,
      szCatalogName,
      cbCatalogName,
      szSchemaName,
      cbSchemaName,
      szTableName,
      cbTableName,
    );
  }

  late final _SQLTablePrivilegesPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT)>>('SQLTablePrivileges');
  late final _SQLTablePrivileges = _SQLTablePrivilegesPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>,
          int, ffi.Pointer<SQLCHAR>, int)>();

  int SQLDrivers(
    SQLHENV henv,
    int fDirection,
    ffi.Pointer<SQLCHAR> szDriverDesc,
    int cbDriverDescMax,
    ffi.Pointer<SQLSMALLINT> pcbDriverDesc,
    ffi.Pointer<SQLCHAR> szDriverAttributes,
    int cbDrvrAttrMax,
    ffi.Pointer<SQLSMALLINT> pcbDrvrAttr,
  ) {
    return _SQLDrivers(
      henv,
      fDirection,
      szDriverDesc,
      cbDriverDescMax,
      pcbDriverDesc,
      szDriverAttributes,
      cbDrvrAttrMax,
      pcbDrvrAttr,
    );
  }

  late final _SQLDriversPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHENV,
              SQLUSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>)>>('SQLDrivers');
  late final _SQLDrivers = _SQLDriversPtr.asFunction<
      int Function(
          SQLHENV,
          int,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLSMALLINT>)>();

  int SQLBindParameter(
    SQLHSTMT hstmt,
    int ipar,
    int fParamType,
    int fCType,
    int fSqlType,
    int cbColDef,
    int ibScale,
    SQLPOINTER rgbValue,
    int cbValueMax,
    ffi.Pointer<SQLLEN> pcbValue,
  ) {
    return _SQLBindParameter(
      hstmt,
      ipar,
      fParamType,
      fCType,
      fSqlType,
      cbColDef,
      ibScale,
      rgbValue,
      cbValueMax,
      pcbValue,
    );
  }

  late final _SQLBindParameterPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              SQLUSMALLINT,
              SQLSMALLINT,
              SQLSMALLINT,
              SQLSMALLINT,
              SQLULEN,
              SQLSMALLINT,
              SQLPOINTER,
              SQLLEN,
              ffi.Pointer<SQLLEN>)>>('SQLBindParameter');
  late final _SQLBindParameter = _SQLBindParameterPtr.asFunction<
      int Function(SQLHSTMT, int, int, int, int, int, int, SQLPOINTER, int,
          ffi.Pointer<SQLLEN>)>();

  int SQLAllocHandleStd(
    int fHandleType,
    SQLHANDLE hInput,
    ffi.Pointer<SQLHANDLE> phOutput,
  ) {
    return _SQLAllocHandleStd(
      fHandleType,
      hInput,
      phOutput,
    );
  }

  late final _SQLAllocHandleStdPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLSMALLINT, SQLHANDLE,
              ffi.Pointer<SQLHANDLE>)>>('SQLAllocHandleStd');
  late final _SQLAllocHandleStd = _SQLAllocHandleStdPtr.asFunction<
      int Function(int, SQLHANDLE, ffi.Pointer<SQLHANDLE>)>();

  int SQLSetScrollOptions(
    SQLHSTMT hstmt,
    int fConcurrency,
    int crowKeyset,
    int crowRowset,
  ) {
    return _SQLSetScrollOptions(
      hstmt,
      fConcurrency,
      crowKeyset,
      crowRowset,
    );
  }

  late final _SQLSetScrollOptionsPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHSTMT, SQLUSMALLINT, SQLLEN,
              SQLUSMALLINT)>>('SQLSetScrollOptions');
  late final _SQLSetScrollOptions = _SQLSetScrollOptionsPtr.asFunction<
      int Function(SQLHSTMT, int, int, int)>();

  int TraceOpenLogFile(
    SQLPOINTER arg0,
    LPSTR arg1,
    LPSTR arg2,
    int arg3,
  ) {
    return _TraceOpenLogFile(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _TraceOpenLogFilePtr = _lookup<
          ffi
          .NativeFunction<RETCODE Function(SQLPOINTER, LPSTR, LPSTR, DWORD)>>(
      'TraceOpenLogFile');
  late final _TraceOpenLogFile = _TraceOpenLogFilePtr.asFunction<
      int Function(SQLPOINTER, LPSTR, LPSTR, int)>();

  int TraceCloseLogFile(
    SQLPOINTER arg0,
  ) {
    return _TraceCloseLogFile(
      arg0,
    );
  }

  late final _TraceCloseLogFilePtr =
      _lookup<ffi.NativeFunction<RETCODE Function(SQLPOINTER)>>(
          'TraceCloseLogFile');
  late final _TraceCloseLogFile =
      _TraceCloseLogFilePtr.asFunction<int Function(SQLPOINTER)>();

  int TraceReturn(
    SQLPOINTER arg0,
    int arg1,
  ) {
    return _TraceReturn(
      arg0,
      arg1,
    );
  }

  late final _TraceReturnPtr =
      _lookup<ffi.NativeFunction<SQLRETURN Function(SQLPOINTER, SQLRETURN)>>(
          'TraceReturn');
  late final _TraceReturn =
      _TraceReturnPtr.asFunction<int Function(SQLPOINTER, int)>();

  int TraceVersion() {
    return _TraceVersion();
  }

  late final _TraceVersionPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('TraceVersion');
  late final _TraceVersion = _TraceVersionPtr.asFunction<int Function()>();

  int TraceVSControl(
    int arg0,
  ) {
    return _TraceVSControl(
      arg0,
    );
  }

  late final _TraceVSControlPtr =
      _lookup<ffi.NativeFunction<RETCODE Function(DWORD)>>('TraceVSControl');
  late final _TraceVSControl =
      _TraceVSControlPtr.asFunction<int Function(int)>();

  void FireVSDebugEvent(
    PODBC_VS_ARGS arg0,
  ) {
    return _FireVSDebugEvent(
      arg0,
    );
  }

  late final _FireVSDebugEventPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PODBC_VS_ARGS)>>(
          'FireVSDebugEvent');
  late final _FireVSDebugEvent =
      _FireVSDebugEventPtr.asFunction<void Function(PODBC_VS_ARGS)>();

  int ODBCSetTryWaitValue(
    int dwValue,
  ) {
    return _ODBCSetTryWaitValue(
      dwValue,
    );
  }

  late final _ODBCSetTryWaitValuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(DWORD)>>(
          'ODBCSetTryWaitValue');
  late final _ODBCSetTryWaitValue =
      _ODBCSetTryWaitValuePtr.asFunction<int Function(int)>();

  int ODBCGetTryWaitValue() {
    return _ODBCGetTryWaitValue();
  }

  late final _ODBCGetTryWaitValuePtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('ODBCGetTryWaitValue');
  late final _ODBCGetTryWaitValue =
      _ODBCGetTryWaitValuePtr.asFunction<int Function()>();

  int SQLColAttributeW(
    SQLHSTMT hstmt,
    int iCol,
    int iField,
    SQLPOINTER pCharAttr,
    int cbCharAttrMax,
    ffi.Pointer<SQLSMALLINT> pcbCharAttr,
    ffi.Pointer<SQLLEN> pNumAttr,
  ) {
    return _SQLColAttributeW(
      hstmt,
      iCol,
      iField,
      pCharAttr,
      cbCharAttrMax,
      pcbCharAttr,
      pNumAttr,
    );
  }

  late final _SQLColAttributeWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              SQLUSMALLINT,
              SQLUSMALLINT,
              SQLPOINTER,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLLEN>)>>('SQLColAttributeW');
  late final _SQLColAttributeW = _SQLColAttributeWPtr.asFunction<
      int Function(SQLHSTMT, int, int, SQLPOINTER, int,
          ffi.Pointer<SQLSMALLINT>, ffi.Pointer<SQLLEN>)>();

  int SQLColAttributesW(
    SQLHSTMT hstmt,
    int icol,
    int fDescType,
    SQLPOINTER rgbDesc,
    int cbDescMax,
    ffi.Pointer<SQLSMALLINT> pcbDesc,
    ffi.Pointer<SQLLEN> pfDesc,
  ) {
    return _SQLColAttributesW(
      hstmt,
      icol,
      fDescType,
      rgbDesc,
      cbDescMax,
      pcbDesc,
      pfDesc,
    );
  }

  late final _SQLColAttributesWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              SQLUSMALLINT,
              SQLUSMALLINT,
              SQLPOINTER,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLLEN>)>>('SQLColAttributesW');
  late final _SQLColAttributesW = _SQLColAttributesWPtr.asFunction<
      int Function(SQLHSTMT, int, int, SQLPOINTER, int,
          ffi.Pointer<SQLSMALLINT>, ffi.Pointer<SQLLEN>)>();

  int SQLConnectW(
    SQLHDBC hdbc,
    ffi.Pointer<SQLWCHAR> szDSN,
    int cbDSN,
    ffi.Pointer<SQLWCHAR> szUID,
    int cbUID,
    ffi.Pointer<SQLWCHAR> szAuthStr,
    int cbAuthStr,
  ) {
    return _SQLConnectW(
      hdbc,
      szDSN,
      cbDSN,
      szUID,
      cbUID,
      szAuthStr,
      cbAuthStr,
    );
  }

  late final _SQLConnectWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHDBC,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT)>>('SQLConnectW');
  late final _SQLConnectW = _SQLConnectWPtr.asFunction<
      int Function(SQLHDBC, ffi.Pointer<SQLWCHAR>, int, ffi.Pointer<SQLWCHAR>,
          int, ffi.Pointer<SQLWCHAR>, int)>();

  int SQLDescribeColW(
    SQLHSTMT hstmt,
    int icol,
    ffi.Pointer<SQLWCHAR> szColName,
    int cbColNameMax,
    ffi.Pointer<SQLSMALLINT> pcbColName,
    ffi.Pointer<SQLSMALLINT> pfSqlType,
    ffi.Pointer<SQLULEN> pcbColDef,
    ffi.Pointer<SQLSMALLINT> pibScale,
    ffi.Pointer<SQLSMALLINT> pfNullable,
  ) {
    return _SQLDescribeColW(
      hstmt,
      icol,
      szColName,
      cbColNameMax,
      pcbColName,
      pfSqlType,
      pcbColDef,
      pibScale,
      pfNullable,
    );
  }

  late final _SQLDescribeColWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              SQLUSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLULEN>,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLSMALLINT>)>>('SQLDescribeColW');
  late final _SQLDescribeColW = _SQLDescribeColWPtr.asFunction<
      int Function(
          SQLHSTMT,
          int,
          ffi.Pointer<SQLWCHAR>,
          int,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLULEN>,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLSMALLINT>)>();

  int SQLErrorW(
    SQLHENV henv,
    SQLHDBC hdbc,
    SQLHSTMT hstmt,
    ffi.Pointer<SQLWCHAR> szSqlState,
    ffi.Pointer<SQLINTEGER> pfNativeError,
    ffi.Pointer<SQLWCHAR> szErrorMsg,
    int cbErrorMsgMax,
    ffi.Pointer<SQLSMALLINT> pcbErrorMsg,
  ) {
    return _SQLErrorW(
      henv,
      hdbc,
      hstmt,
      szSqlState,
      pfNativeError,
      szErrorMsg,
      cbErrorMsgMax,
      pcbErrorMsg,
    );
  }

  late final _SQLErrorWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHENV,
              SQLHDBC,
              SQLHSTMT,
              ffi.Pointer<SQLWCHAR>,
              ffi.Pointer<SQLINTEGER>,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>)>>('SQLErrorW');
  late final _SQLErrorW = _SQLErrorWPtr.asFunction<
      int Function(
          SQLHENV,
          SQLHDBC,
          SQLHSTMT,
          ffi.Pointer<SQLWCHAR>,
          ffi.Pointer<SQLINTEGER>,
          ffi.Pointer<SQLWCHAR>,
          int,
          ffi.Pointer<SQLSMALLINT>)>();

  int SQLExecDirectW(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLWCHAR> szSqlStr,
    int cbSqlStr,
  ) {
    return _SQLExecDirectW(
      hstmt,
      szSqlStr,
      cbSqlStr,
    );
  }

  late final _SQLExecDirectWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT, ffi.Pointer<SQLWCHAR>, SQLINTEGER)>>('SQLExecDirectW');
  late final _SQLExecDirectW = _SQLExecDirectWPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLWCHAR>, int)>();

  int SQLGetConnectAttrW(
    SQLHDBC hdbc,
    int fAttribute,
    SQLPOINTER rgbValue,
    int cbValueMax,
    ffi.Pointer<SQLINTEGER> pcbValue,
  ) {
    return _SQLGetConnectAttrW(
      hdbc,
      fAttribute,
      rgbValue,
      cbValueMax,
      pcbValue,
    );
  }

  late final _SQLGetConnectAttrWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHDBC, SQLINTEGER, SQLPOINTER, SQLINTEGER,
              ffi.Pointer<SQLINTEGER>)>>('SQLGetConnectAttrW');
  late final _SQLGetConnectAttrW = _SQLGetConnectAttrWPtr.asFunction<
      int Function(SQLHDBC, int, SQLPOINTER, int, ffi.Pointer<SQLINTEGER>)>();

  int SQLGetCursorNameW(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLWCHAR> szCursor,
    int cbCursorMax,
    ffi.Pointer<SQLSMALLINT> pcbCursor,
  ) {
    return _SQLGetCursorNameW(
      hstmt,
      szCursor,
      cbCursorMax,
      pcbCursor,
    );
  }

  late final _SQLGetCursorNameWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHSTMT, ffi.Pointer<SQLWCHAR>, SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>)>>('SQLGetCursorNameW');
  late final _SQLGetCursorNameW = _SQLGetCursorNameWPtr.asFunction<
      int Function(
          SQLHSTMT, ffi.Pointer<SQLWCHAR>, int, ffi.Pointer<SQLSMALLINT>)>();

  int SQLSetDescFieldW(
    SQLHDESC DescriptorHandle,
    int RecNumber,
    int FieldIdentifier,
    SQLPOINTER Value,
    int BufferLength,
  ) {
    return _SQLSetDescFieldW(
      DescriptorHandle,
      RecNumber,
      FieldIdentifier,
      Value,
      BufferLength,
    );
  }

  late final _SQLSetDescFieldWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHDESC, SQLSMALLINT, SQLSMALLINT, SQLPOINTER,
              SQLINTEGER)>>('SQLSetDescFieldW');
  late final _SQLSetDescFieldW = _SQLSetDescFieldWPtr.asFunction<
      int Function(SQLHDESC, int, int, SQLPOINTER, int)>();

  int SQLGetDescFieldW(
    SQLHDESC hdesc,
    int iRecord,
    int iField,
    SQLPOINTER rgbValue,
    int cbValueMax,
    ffi.Pointer<SQLINTEGER> pcbValue,
  ) {
    return _SQLGetDescFieldW(
      hdesc,
      iRecord,
      iField,
      rgbValue,
      cbValueMax,
      pcbValue,
    );
  }

  late final _SQLGetDescFieldWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHDESC, SQLSMALLINT, SQLSMALLINT, SQLPOINTER,
              SQLINTEGER, ffi.Pointer<SQLINTEGER>)>>('SQLGetDescFieldW');
  late final _SQLGetDescFieldW = _SQLGetDescFieldWPtr.asFunction<
      int Function(
          SQLHDESC, int, int, SQLPOINTER, int, ffi.Pointer<SQLINTEGER>)>();

  int SQLGetDescRecW(
    SQLHDESC hdesc,
    int iRecord,
    ffi.Pointer<SQLWCHAR> szName,
    int cbNameMax,
    ffi.Pointer<SQLSMALLINT> pcbName,
    ffi.Pointer<SQLSMALLINT> pfType,
    ffi.Pointer<SQLSMALLINT> pfSubType,
    ffi.Pointer<SQLLEN> pLength,
    ffi.Pointer<SQLSMALLINT> pPrecision,
    ffi.Pointer<SQLSMALLINT> pScale,
    ffi.Pointer<SQLSMALLINT> pNullable,
  ) {
    return _SQLGetDescRecW(
      hdesc,
      iRecord,
      szName,
      cbNameMax,
      pcbName,
      pfType,
      pfSubType,
      pLength,
      pPrecision,
      pScale,
      pNullable,
    );
  }

  late final _SQLGetDescRecWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHDESC,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLLEN>,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLSMALLINT>)>>('SQLGetDescRecW');
  late final _SQLGetDescRecW = _SQLGetDescRecWPtr.asFunction<
      int Function(
          SQLHDESC,
          int,
          ffi.Pointer<SQLWCHAR>,
          int,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLLEN>,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLSMALLINT>)>();

  int SQLGetDiagFieldW(
    int fHandleType,
    SQLHANDLE handle,
    int iRecord,
    int fDiagField,
    SQLPOINTER rgbDiagInfo,
    int cbDiagInfoMax,
    ffi.Pointer<SQLSMALLINT> pcbDiagInfo,
  ) {
    return _SQLGetDiagFieldW(
      fHandleType,
      handle,
      iRecord,
      fDiagField,
      rgbDiagInfo,
      cbDiagInfoMax,
      pcbDiagInfo,
    );
  }

  late final _SQLGetDiagFieldWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLSMALLINT,
              SQLHANDLE,
              SQLSMALLINT,
              SQLSMALLINT,
              SQLPOINTER,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>)>>('SQLGetDiagFieldW');
  late final _SQLGetDiagFieldW = _SQLGetDiagFieldWPtr.asFunction<
      int Function(int, SQLHANDLE, int, int, SQLPOINTER, int,
          ffi.Pointer<SQLSMALLINT>)>();

  int SQLGetDiagRecW(
    int fHandleType,
    SQLHANDLE handle,
    int iRecord,
    ffi.Pointer<SQLWCHAR> szSqlState,
    ffi.Pointer<SQLINTEGER> pfNativeError,
    ffi.Pointer<SQLWCHAR> szErrorMsg,
    int cbErrorMsgMax,
    ffi.Pointer<SQLSMALLINT> pcbErrorMsg,
  ) {
    return _SQLGetDiagRecW(
      fHandleType,
      handle,
      iRecord,
      szSqlState,
      pfNativeError,
      szErrorMsg,
      cbErrorMsgMax,
      pcbErrorMsg,
    );
  }

  late final _SQLGetDiagRecWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLSMALLINT,
              SQLHANDLE,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              ffi.Pointer<SQLINTEGER>,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>)>>('SQLGetDiagRecW');
  late final _SQLGetDiagRecW = _SQLGetDiagRecWPtr.asFunction<
      int Function(
          int,
          SQLHANDLE,
          int,
          ffi.Pointer<SQLWCHAR>,
          ffi.Pointer<SQLINTEGER>,
          ffi.Pointer<SQLWCHAR>,
          int,
          ffi.Pointer<SQLSMALLINT>)>();

  int SQLPrepareW(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLWCHAR> szSqlStr,
    int cbSqlStr,
  ) {
    return _SQLPrepareW(
      hstmt,
      szSqlStr,
      cbSqlStr,
    );
  }

  late final _SQLPrepareWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT, ffi.Pointer<SQLWCHAR>, SQLINTEGER)>>('SQLPrepareW');
  late final _SQLPrepareW = _SQLPrepareWPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLWCHAR>, int)>();

  int SQLSetConnectAttrW(
    SQLHDBC hdbc,
    int fAttribute,
    SQLPOINTER rgbValue,
    int cbValue,
  ) {
    return _SQLSetConnectAttrW(
      hdbc,
      fAttribute,
      rgbValue,
      cbValue,
    );
  }

  late final _SQLSetConnectAttrWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHDBC, SQLINTEGER, SQLPOINTER,
              SQLINTEGER)>>('SQLSetConnectAttrW');
  late final _SQLSetConnectAttrW = _SQLSetConnectAttrWPtr.asFunction<
      int Function(SQLHDBC, int, SQLPOINTER, int)>();

  int SQLSetCursorNameW(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLWCHAR> szCursor,
    int cbCursor,
  ) {
    return _SQLSetCursorNameW(
      hstmt,
      szCursor,
      cbCursor,
    );
  }

  late final _SQLSetCursorNameWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHSTMT, ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT)>>('SQLSetCursorNameW');
  late final _SQLSetCursorNameW = _SQLSetCursorNameWPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLWCHAR>, int)>();

  int SQLColumnsW(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLWCHAR> szCatalogName,
    int cbCatalogName,
    ffi.Pointer<SQLWCHAR> szSchemaName,
    int cbSchemaName,
    ffi.Pointer<SQLWCHAR> szTableName,
    int cbTableName,
    ffi.Pointer<SQLWCHAR> szColumnName,
    int cbColumnName,
  ) {
    return _SQLColumnsW(
      hstmt,
      szCatalogName,
      cbCatalogName,
      szSchemaName,
      cbSchemaName,
      szTableName,
      cbTableName,
      szColumnName,
      cbColumnName,
    );
  }

  late final _SQLColumnsWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT)>>('SQLColumnsW');
  late final _SQLColumnsW = _SQLColumnsWPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLWCHAR>, int, ffi.Pointer<SQLWCHAR>,
          int, ffi.Pointer<SQLWCHAR>, int, ffi.Pointer<SQLWCHAR>, int)>();

  int SQLGetConnectOptionW(
    SQLHDBC hdbc,
    int fOption,
    SQLPOINTER pvParam,
  ) {
    return _SQLGetConnectOptionW(
      hdbc,
      fOption,
      pvParam,
    );
  }

  late final _SQLGetConnectOptionWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHDBC, SQLUSMALLINT, SQLPOINTER)>>('SQLGetConnectOptionW');
  late final _SQLGetConnectOptionW = _SQLGetConnectOptionWPtr.asFunction<
      int Function(SQLHDBC, int, SQLPOINTER)>();

  int SQLGetInfoW(
    SQLHDBC hdbc,
    int fInfoType,
    SQLPOINTER rgbInfoValue,
    int cbInfoValueMax,
    ffi.Pointer<SQLSMALLINT> pcbInfoValue,
  ) {
    return _SQLGetInfoW(
      hdbc,
      fInfoType,
      rgbInfoValue,
      cbInfoValueMax,
      pcbInfoValue,
    );
  }

  late final _SQLGetInfoWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHDBC, SQLUSMALLINT, SQLPOINTER, SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>)>>('SQLGetInfoW');
  late final _SQLGetInfoW = _SQLGetInfoWPtr.asFunction<
      int Function(SQLHDBC, int, SQLPOINTER, int, ffi.Pointer<SQLSMALLINT>)>();

  int SQLGetTypeInfoW(
    SQLHSTMT StatementHandle,
    int DataType,
  ) {
    return _SQLGetTypeInfoW(
      StatementHandle,
      DataType,
    );
  }

  late final _SQLGetTypeInfoWPtr =
      _lookup<ffi.NativeFunction<SQLRETURN Function(SQLHSTMT, SQLSMALLINT)>>(
          'SQLGetTypeInfoW');
  late final _SQLGetTypeInfoW =
      _SQLGetTypeInfoWPtr.asFunction<int Function(SQLHSTMT, int)>();

  int SQLSetConnectOptionW(
    SQLHDBC hdbc,
    int fOption,
    int vParam,
  ) {
    return _SQLSetConnectOptionW(
      hdbc,
      fOption,
      vParam,
    );
  }

  late final _SQLSetConnectOptionWPtr = _lookup<
          ffi
          .NativeFunction<SQLRETURN Function(SQLHDBC, SQLUSMALLINT, SQLULEN)>>(
      'SQLSetConnectOptionW');
  late final _SQLSetConnectOptionW =
      _SQLSetConnectOptionWPtr.asFunction<int Function(SQLHDBC, int, int)>();

  int SQLSpecialColumnsW(
    SQLHSTMT hstmt,
    int fColType,
    ffi.Pointer<SQLWCHAR> szCatalogName,
    int cbCatalogName,
    ffi.Pointer<SQLWCHAR> szSchemaName,
    int cbSchemaName,
    ffi.Pointer<SQLWCHAR> szTableName,
    int cbTableName,
    int fScope,
    int fNullable,
  ) {
    return _SQLSpecialColumnsW(
      hstmt,
      fColType,
      szCatalogName,
      cbCatalogName,
      szSchemaName,
      cbSchemaName,
      szTableName,
      cbTableName,
      fScope,
      fNullable,
    );
  }

  late final _SQLSpecialColumnsWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              SQLUSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              SQLUSMALLINT,
              SQLUSMALLINT)>>('SQLSpecialColumnsW');
  late final _SQLSpecialColumnsW = _SQLSpecialColumnsWPtr.asFunction<
      int Function(SQLHSTMT, int, ffi.Pointer<SQLWCHAR>, int,
          ffi.Pointer<SQLWCHAR>, int, ffi.Pointer<SQLWCHAR>, int, int, int)>();

  int SQLStatisticsW(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLWCHAR> szCatalogName,
    int cbCatalogName,
    ffi.Pointer<SQLWCHAR> szSchemaName,
    int cbSchemaName,
    ffi.Pointer<SQLWCHAR> szTableName,
    int cbTableName,
    int fUnique,
    int fAccuracy,
  ) {
    return _SQLStatisticsW(
      hstmt,
      szCatalogName,
      cbCatalogName,
      szSchemaName,
      cbSchemaName,
      szTableName,
      cbTableName,
      fUnique,
      fAccuracy,
    );
  }

  late final _SQLStatisticsWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              SQLUSMALLINT,
              SQLUSMALLINT)>>('SQLStatisticsW');
  late final _SQLStatisticsW = _SQLStatisticsWPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLWCHAR>, int, ffi.Pointer<SQLWCHAR>,
          int, ffi.Pointer<SQLWCHAR>, int, int, int)>();

  int SQLTablesW(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLWCHAR> szCatalogName,
    int cbCatalogName,
    ffi.Pointer<SQLWCHAR> szSchemaName,
    int cbSchemaName,
    ffi.Pointer<SQLWCHAR> szTableName,
    int cbTableName,
    ffi.Pointer<SQLWCHAR> szTableType,
    int cbTableType,
  ) {
    return _SQLTablesW(
      hstmt,
      szCatalogName,
      cbCatalogName,
      szSchemaName,
      cbSchemaName,
      szTableName,
      cbTableName,
      szTableType,
      cbTableType,
    );
  }

  late final _SQLTablesWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT)>>('SQLTablesW');
  late final _SQLTablesW = _SQLTablesWPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLWCHAR>, int, ffi.Pointer<SQLWCHAR>,
          int, ffi.Pointer<SQLWCHAR>, int, ffi.Pointer<SQLWCHAR>, int)>();

  int SQLDataSourcesW(
    SQLHENV henv,
    int fDirection,
    ffi.Pointer<SQLWCHAR> szDSN,
    int cbDSNMax,
    ffi.Pointer<SQLSMALLINT> pcbDSN,
    ffi.Pointer<SQLWCHAR> szDescription,
    int cbDescriptionMax,
    ffi.Pointer<SQLSMALLINT> pcbDescription,
  ) {
    return _SQLDataSourcesW(
      henv,
      fDirection,
      szDSN,
      cbDSNMax,
      pcbDSN,
      szDescription,
      cbDescriptionMax,
      pcbDescription,
    );
  }

  late final _SQLDataSourcesWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHENV,
              SQLUSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>)>>('SQLDataSourcesW');
  late final _SQLDataSourcesW = _SQLDataSourcesWPtr.asFunction<
      int Function(
          SQLHENV,
          int,
          ffi.Pointer<SQLWCHAR>,
          int,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLWCHAR>,
          int,
          ffi.Pointer<SQLSMALLINT>)>();

  int SQLDriverConnectW(
    SQLHDBC hdbc,
    SQLHWND hwnd,
    ffi.Pointer<SQLWCHAR> szConnStrIn,
    int cbConnStrIn,
    ffi.Pointer<SQLWCHAR> szConnStrOut,
    int cbConnStrOutMax,
    ffi.Pointer<SQLSMALLINT> pcbConnStrOut,
    int fDriverCompletion,
  ) {
    return _SQLDriverConnectW(
      hdbc,
      hwnd,
      szConnStrIn,
      cbConnStrIn,
      szConnStrOut,
      cbConnStrOutMax,
      pcbConnStrOut,
      fDriverCompletion,
    );
  }

  late final _SQLDriverConnectWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHDBC,
              SQLHWND,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>,
              SQLUSMALLINT)>>('SQLDriverConnectW');
  late final _SQLDriverConnectW = _SQLDriverConnectWPtr.asFunction<
      int Function(SQLHDBC, SQLHWND, ffi.Pointer<SQLWCHAR>, int,
          ffi.Pointer<SQLWCHAR>, int, ffi.Pointer<SQLSMALLINT>, int)>();

  int SQLBrowseConnectW(
    SQLHDBC hdbc,
    ffi.Pointer<SQLWCHAR> szConnStrIn,
    int cbConnStrIn,
    ffi.Pointer<SQLWCHAR> szConnStrOut,
    int cbConnStrOutMax,
    ffi.Pointer<SQLSMALLINT> pcbConnStrOut,
  ) {
    return _SQLBrowseConnectW(
      hdbc,
      szConnStrIn,
      cbConnStrIn,
      szConnStrOut,
      cbConnStrOutMax,
      pcbConnStrOut,
    );
  }

  late final _SQLBrowseConnectWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHDBC,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>)>>('SQLBrowseConnectW');
  late final _SQLBrowseConnectW = _SQLBrowseConnectWPtr.asFunction<
      int Function(SQLHDBC, ffi.Pointer<SQLWCHAR>, int, ffi.Pointer<SQLWCHAR>,
          int, ffi.Pointer<SQLSMALLINT>)>();

  int SQLColumnPrivilegesW(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLWCHAR> szCatalogName,
    int cbCatalogName,
    ffi.Pointer<SQLWCHAR> szSchemaName,
    int cbSchemaName,
    ffi.Pointer<SQLWCHAR> szTableName,
    int cbTableName,
    ffi.Pointer<SQLWCHAR> szColumnName,
    int cbColumnName,
  ) {
    return _SQLColumnPrivilegesW(
      hstmt,
      szCatalogName,
      cbCatalogName,
      szSchemaName,
      cbSchemaName,
      szTableName,
      cbTableName,
      szColumnName,
      cbColumnName,
    );
  }

  late final _SQLColumnPrivilegesWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT)>>('SQLColumnPrivilegesW');
  late final _SQLColumnPrivilegesW = _SQLColumnPrivilegesWPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLWCHAR>, int, ffi.Pointer<SQLWCHAR>,
          int, ffi.Pointer<SQLWCHAR>, int, ffi.Pointer<SQLWCHAR>, int)>();

  int SQLGetStmtAttrW(
    SQLHSTMT hstmt,
    int fAttribute,
    SQLPOINTER rgbValue,
    int cbValueMax,
    ffi.Pointer<SQLINTEGER> pcbValue,
  ) {
    return _SQLGetStmtAttrW(
      hstmt,
      fAttribute,
      rgbValue,
      cbValueMax,
      pcbValue,
    );
  }

  late final _SQLGetStmtAttrWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHSTMT, SQLINTEGER, SQLPOINTER, SQLINTEGER,
              ffi.Pointer<SQLINTEGER>)>>('SQLGetStmtAttrW');
  late final _SQLGetStmtAttrW = _SQLGetStmtAttrWPtr.asFunction<
      int Function(SQLHSTMT, int, SQLPOINTER, int, ffi.Pointer<SQLINTEGER>)>();

  int SQLSetStmtAttrW(
    SQLHSTMT hstmt,
    int fAttribute,
    SQLPOINTER rgbValue,
    int cbValueMax,
  ) {
    return _SQLSetStmtAttrW(
      hstmt,
      fAttribute,
      rgbValue,
      cbValueMax,
    );
  }

  late final _SQLSetStmtAttrWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHSTMT, SQLINTEGER, SQLPOINTER,
              SQLINTEGER)>>('SQLSetStmtAttrW');
  late final _SQLSetStmtAttrW = _SQLSetStmtAttrWPtr.asFunction<
      int Function(SQLHSTMT, int, SQLPOINTER, int)>();

  int SQLForeignKeysW(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLWCHAR> szPkCatalogName,
    int cbPkCatalogName,
    ffi.Pointer<SQLWCHAR> szPkSchemaName,
    int cbPkSchemaName,
    ffi.Pointer<SQLWCHAR> szPkTableName,
    int cbPkTableName,
    ffi.Pointer<SQLWCHAR> szFkCatalogName,
    int cbFkCatalogName,
    ffi.Pointer<SQLWCHAR> szFkSchemaName,
    int cbFkSchemaName,
    ffi.Pointer<SQLWCHAR> szFkTableName,
    int cbFkTableName,
  ) {
    return _SQLForeignKeysW(
      hstmt,
      szPkCatalogName,
      cbPkCatalogName,
      szPkSchemaName,
      cbPkSchemaName,
      szPkTableName,
      cbPkTableName,
      szFkCatalogName,
      cbFkCatalogName,
      szFkSchemaName,
      cbFkSchemaName,
      szFkTableName,
      cbFkTableName,
    );
  }

  late final _SQLForeignKeysWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT)>>('SQLForeignKeysW');
  late final _SQLForeignKeysW = _SQLForeignKeysWPtr.asFunction<
      int Function(
          SQLHSTMT,
          ffi.Pointer<SQLWCHAR>,
          int,
          ffi.Pointer<SQLWCHAR>,
          int,
          ffi.Pointer<SQLWCHAR>,
          int,
          ffi.Pointer<SQLWCHAR>,
          int,
          ffi.Pointer<SQLWCHAR>,
          int,
          ffi.Pointer<SQLWCHAR>,
          int)>();

  int SQLNativeSqlW(
    SQLHDBC hdbc,
    ffi.Pointer<SQLWCHAR> szSqlStrIn,
    int cbSqlStrIn,
    ffi.Pointer<SQLWCHAR> szSqlStr,
    int cbSqlStrMax,
    ffi.Pointer<SQLINTEGER> pcbSqlStr,
  ) {
    return _SQLNativeSqlW(
      hdbc,
      szSqlStrIn,
      cbSqlStrIn,
      szSqlStr,
      cbSqlStrMax,
      pcbSqlStr,
    );
  }

  late final _SQLNativeSqlWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHDBC,
              ffi.Pointer<SQLWCHAR>,
              SQLINTEGER,
              ffi.Pointer<SQLWCHAR>,
              SQLINTEGER,
              ffi.Pointer<SQLINTEGER>)>>('SQLNativeSqlW');
  late final _SQLNativeSqlW = _SQLNativeSqlWPtr.asFunction<
      int Function(SQLHDBC, ffi.Pointer<SQLWCHAR>, int, ffi.Pointer<SQLWCHAR>,
          int, ffi.Pointer<SQLINTEGER>)>();

  int SQLPrimaryKeysW(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLWCHAR> szCatalogName,
    int cbCatalogName,
    ffi.Pointer<SQLWCHAR> szSchemaName,
    int cbSchemaName,
    ffi.Pointer<SQLWCHAR> szTableName,
    int cbTableName,
  ) {
    return _SQLPrimaryKeysW(
      hstmt,
      szCatalogName,
      cbCatalogName,
      szSchemaName,
      cbSchemaName,
      szTableName,
      cbTableName,
    );
  }

  late final _SQLPrimaryKeysWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT)>>('SQLPrimaryKeysW');
  late final _SQLPrimaryKeysW = _SQLPrimaryKeysWPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLWCHAR>, int, ffi.Pointer<SQLWCHAR>,
          int, ffi.Pointer<SQLWCHAR>, int)>();

  int SQLProcedureColumnsW(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLWCHAR> szCatalogName,
    int cbCatalogName,
    ffi.Pointer<SQLWCHAR> szSchemaName,
    int cbSchemaName,
    ffi.Pointer<SQLWCHAR> szProcName,
    int cbProcName,
    ffi.Pointer<SQLWCHAR> szColumnName,
    int cbColumnName,
  ) {
    return _SQLProcedureColumnsW(
      hstmt,
      szCatalogName,
      cbCatalogName,
      szSchemaName,
      cbSchemaName,
      szProcName,
      cbProcName,
      szColumnName,
      cbColumnName,
    );
  }

  late final _SQLProcedureColumnsWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT)>>('SQLProcedureColumnsW');
  late final _SQLProcedureColumnsW = _SQLProcedureColumnsWPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLWCHAR>, int, ffi.Pointer<SQLWCHAR>,
          int, ffi.Pointer<SQLWCHAR>, int, ffi.Pointer<SQLWCHAR>, int)>();

  int SQLProceduresW(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLWCHAR> szCatalogName,
    int cbCatalogName,
    ffi.Pointer<SQLWCHAR> szSchemaName,
    int cbSchemaName,
    ffi.Pointer<SQLWCHAR> szProcName,
    int cbProcName,
  ) {
    return _SQLProceduresW(
      hstmt,
      szCatalogName,
      cbCatalogName,
      szSchemaName,
      cbSchemaName,
      szProcName,
      cbProcName,
    );
  }

  late final _SQLProceduresWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT)>>('SQLProceduresW');
  late final _SQLProceduresW = _SQLProceduresWPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLWCHAR>, int, ffi.Pointer<SQLWCHAR>,
          int, ffi.Pointer<SQLWCHAR>, int)>();

  int SQLTablePrivilegesW(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLWCHAR> szCatalogName,
    int cbCatalogName,
    ffi.Pointer<SQLWCHAR> szSchemaName,
    int cbSchemaName,
    ffi.Pointer<SQLWCHAR> szTableName,
    int cbTableName,
  ) {
    return _SQLTablePrivilegesW(
      hstmt,
      szCatalogName,
      cbCatalogName,
      szSchemaName,
      cbSchemaName,
      szTableName,
      cbTableName,
    );
  }

  late final _SQLTablePrivilegesWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT)>>('SQLTablePrivilegesW');
  late final _SQLTablePrivilegesW = _SQLTablePrivilegesWPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLWCHAR>, int, ffi.Pointer<SQLWCHAR>,
          int, ffi.Pointer<SQLWCHAR>, int)>();

  int SQLDriversW(
    SQLHENV henv,
    int fDirection,
    ffi.Pointer<SQLWCHAR> szDriverDesc,
    int cbDriverDescMax,
    ffi.Pointer<SQLSMALLINT> pcbDriverDesc,
    ffi.Pointer<SQLWCHAR> szDriverAttributes,
    int cbDrvrAttrMax,
    ffi.Pointer<SQLSMALLINT> pcbDrvrAttr,
  ) {
    return _SQLDriversW(
      henv,
      fDirection,
      szDriverDesc,
      cbDriverDescMax,
      pcbDriverDesc,
      szDriverAttributes,
      cbDrvrAttrMax,
      pcbDrvrAttr,
    );
  }

  late final _SQLDriversWPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHENV,
              SQLUSMALLINT,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLWCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>)>>('SQLDriversW');
  late final _SQLDriversW = _SQLDriversWPtr.asFunction<
      int Function(
          SQLHENV,
          int,
          ffi.Pointer<SQLWCHAR>,
          int,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLWCHAR>,
          int,
          ffi.Pointer<SQLSMALLINT>)>();

  int SQLColAttributeA(
    SQLHSTMT hstmt,
    int iCol,
    int iField,
    SQLPOINTER pCharAttr,
    int cbCharAttrMax,
    ffi.Pointer<SQLSMALLINT> pcbCharAttr,
    ffi.Pointer<SQLLEN> pNumAttr,
  ) {
    return _SQLColAttributeA(
      hstmt,
      iCol,
      iField,
      pCharAttr,
      cbCharAttrMax,
      pcbCharAttr,
      pNumAttr,
    );
  }

  late final _SQLColAttributeAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              SQLSMALLINT,
              SQLSMALLINT,
              SQLPOINTER,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLLEN>)>>('SQLColAttributeA');
  late final _SQLColAttributeA = _SQLColAttributeAPtr.asFunction<
      int Function(SQLHSTMT, int, int, SQLPOINTER, int,
          ffi.Pointer<SQLSMALLINT>, ffi.Pointer<SQLLEN>)>();

  int SQLColAttributesA(
    SQLHSTMT hstmt,
    int icol,
    int fDescType,
    SQLPOINTER rgbDesc,
    int cbDescMax,
    ffi.Pointer<SQLSMALLINT> pcbDesc,
    ffi.Pointer<SQLLEN> pfDesc,
  ) {
    return _SQLColAttributesA(
      hstmt,
      icol,
      fDescType,
      rgbDesc,
      cbDescMax,
      pcbDesc,
      pfDesc,
    );
  }

  late final _SQLColAttributesAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              SQLUSMALLINT,
              SQLUSMALLINT,
              SQLPOINTER,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLLEN>)>>('SQLColAttributesA');
  late final _SQLColAttributesA = _SQLColAttributesAPtr.asFunction<
      int Function(SQLHSTMT, int, int, SQLPOINTER, int,
          ffi.Pointer<SQLSMALLINT>, ffi.Pointer<SQLLEN>)>();

  int SQLConnectA(
    SQLHDBC hdbc,
    ffi.Pointer<SQLCHAR> szDSN,
    int cbDSN,
    ffi.Pointer<SQLCHAR> szUID,
    int cbUID,
    ffi.Pointer<SQLCHAR> szAuthStr,
    int cbAuthStr,
  ) {
    return _SQLConnectA(
      hdbc,
      szDSN,
      cbDSN,
      szUID,
      cbUID,
      szAuthStr,
      cbAuthStr,
    );
  }

  late final _SQLConnectAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHDBC,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT)>>('SQLConnectA');
  late final _SQLConnectA = _SQLConnectAPtr.asFunction<
      int Function(SQLHDBC, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>,
          int, ffi.Pointer<SQLCHAR>, int)>();

  int SQLDescribeColA(
    SQLHSTMT hstmt,
    int icol,
    ffi.Pointer<SQLCHAR> szColName,
    int cbColNameMax,
    ffi.Pointer<SQLSMALLINT> pcbColName,
    ffi.Pointer<SQLSMALLINT> pfSqlType,
    ffi.Pointer<SQLULEN> pcbColDef,
    ffi.Pointer<SQLSMALLINT> pibScale,
    ffi.Pointer<SQLSMALLINT> pfNullable,
  ) {
    return _SQLDescribeColA(
      hstmt,
      icol,
      szColName,
      cbColNameMax,
      pcbColName,
      pfSqlType,
      pcbColDef,
      pibScale,
      pfNullable,
    );
  }

  late final _SQLDescribeColAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              SQLUSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLULEN>,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLSMALLINT>)>>('SQLDescribeColA');
  late final _SQLDescribeColA = _SQLDescribeColAPtr.asFunction<
      int Function(
          SQLHSTMT,
          int,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLULEN>,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLSMALLINT>)>();

  int SQLErrorA(
    SQLHENV henv,
    SQLHDBC hdbc,
    SQLHSTMT hstmt,
    ffi.Pointer<SQLCHAR> szSqlState,
    ffi.Pointer<SQLINTEGER> pfNativeError,
    ffi.Pointer<SQLCHAR> szErrorMsg,
    int cbErrorMsgMax,
    ffi.Pointer<SQLSMALLINT> pcbErrorMsg,
  ) {
    return _SQLErrorA(
      henv,
      hdbc,
      hstmt,
      szSqlState,
      pfNativeError,
      szErrorMsg,
      cbErrorMsgMax,
      pcbErrorMsg,
    );
  }

  late final _SQLErrorAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHENV,
              SQLHDBC,
              SQLHSTMT,
              ffi.Pointer<SQLCHAR>,
              ffi.Pointer<SQLINTEGER>,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>)>>('SQLErrorA');
  late final _SQLErrorA = _SQLErrorAPtr.asFunction<
      int Function(
          SQLHENV,
          SQLHDBC,
          SQLHSTMT,
          ffi.Pointer<SQLCHAR>,
          ffi.Pointer<SQLINTEGER>,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLSMALLINT>)>();

  int SQLExecDirectA(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLCHAR> szSqlStr,
    int cbSqlStr,
  ) {
    return _SQLExecDirectA(
      hstmt,
      szSqlStr,
      cbSqlStr,
    );
  }

  late final _SQLExecDirectAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT, ffi.Pointer<SQLCHAR>, SQLINTEGER)>>('SQLExecDirectA');
  late final _SQLExecDirectA = _SQLExecDirectAPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLCHAR>, int)>();

  int SQLGetConnectAttrA(
    SQLHDBC hdbc,
    int fAttribute,
    SQLPOINTER rgbValue,
    int cbValueMax,
    ffi.Pointer<SQLINTEGER> pcbValue,
  ) {
    return _SQLGetConnectAttrA(
      hdbc,
      fAttribute,
      rgbValue,
      cbValueMax,
      pcbValue,
    );
  }

  late final _SQLGetConnectAttrAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHDBC, SQLINTEGER, SQLPOINTER, SQLINTEGER,
              ffi.Pointer<SQLINTEGER>)>>('SQLGetConnectAttrA');
  late final _SQLGetConnectAttrA = _SQLGetConnectAttrAPtr.asFunction<
      int Function(SQLHDBC, int, SQLPOINTER, int, ffi.Pointer<SQLINTEGER>)>();

  int SQLGetCursorNameA(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLCHAR> szCursor,
    int cbCursorMax,
    ffi.Pointer<SQLSMALLINT> pcbCursor,
  ) {
    return _SQLGetCursorNameA(
      hstmt,
      szCursor,
      cbCursorMax,
      pcbCursor,
    );
  }

  late final _SQLGetCursorNameAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHSTMT, ffi.Pointer<SQLCHAR>, SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>)>>('SQLGetCursorNameA');
  late final _SQLGetCursorNameA = _SQLGetCursorNameAPtr.asFunction<
      int Function(
          SQLHSTMT, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLSMALLINT>)>();

  int SQLGetDescFieldA(
    SQLHDESC hdesc,
    int iRecord,
    int iField,
    SQLPOINTER rgbValue,
    int cbValueMax,
    ffi.Pointer<SQLINTEGER> pcbValue,
  ) {
    return _SQLGetDescFieldA(
      hdesc,
      iRecord,
      iField,
      rgbValue,
      cbValueMax,
      pcbValue,
    );
  }

  late final _SQLGetDescFieldAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHDESC, SQLSMALLINT, SQLSMALLINT, SQLPOINTER,
              SQLINTEGER, ffi.Pointer<SQLINTEGER>)>>('SQLGetDescFieldA');
  late final _SQLGetDescFieldA = _SQLGetDescFieldAPtr.asFunction<
      int Function(
          SQLHDESC, int, int, SQLPOINTER, int, ffi.Pointer<SQLINTEGER>)>();

  int SQLGetDescRecA(
    SQLHDESC hdesc,
    int iRecord,
    ffi.Pointer<SQLCHAR> szName,
    int cbNameMax,
    ffi.Pointer<SQLSMALLINT> pcbName,
    ffi.Pointer<SQLSMALLINT> pfType,
    ffi.Pointer<SQLSMALLINT> pfSubType,
    ffi.Pointer<SQLLEN> pLength,
    ffi.Pointer<SQLSMALLINT> pPrecision,
    ffi.Pointer<SQLSMALLINT> pScale,
    ffi.Pointer<SQLSMALLINT> pNullable,
  ) {
    return _SQLGetDescRecA(
      hdesc,
      iRecord,
      szName,
      cbNameMax,
      pcbName,
      pfType,
      pfSubType,
      pLength,
      pPrecision,
      pScale,
      pNullable,
    );
  }

  late final _SQLGetDescRecAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHDESC,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLLEN>,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLSMALLINT>)>>('SQLGetDescRecA');
  late final _SQLGetDescRecA = _SQLGetDescRecAPtr.asFunction<
      int Function(
          SQLHDESC,
          int,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLLEN>,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLSMALLINT>)>();

  int SQLGetDiagFieldA(
    int fHandleType,
    SQLHANDLE handle,
    int iRecord,
    int fDiagField,
    SQLPOINTER rgbDiagInfo,
    int cbDiagInfoMax,
    ffi.Pointer<SQLSMALLINT> pcbDiagInfo,
  ) {
    return _SQLGetDiagFieldA(
      fHandleType,
      handle,
      iRecord,
      fDiagField,
      rgbDiagInfo,
      cbDiagInfoMax,
      pcbDiagInfo,
    );
  }

  late final _SQLGetDiagFieldAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLSMALLINT,
              SQLHANDLE,
              SQLSMALLINT,
              SQLSMALLINT,
              SQLPOINTER,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>)>>('SQLGetDiagFieldA');
  late final _SQLGetDiagFieldA = _SQLGetDiagFieldAPtr.asFunction<
      int Function(int, SQLHANDLE, int, int, SQLPOINTER, int,
          ffi.Pointer<SQLSMALLINT>)>();

  int SQLGetDiagRecA(
    int fHandleType,
    SQLHANDLE handle,
    int iRecord,
    ffi.Pointer<SQLCHAR> szSqlState,
    ffi.Pointer<SQLINTEGER> pfNativeError,
    ffi.Pointer<SQLCHAR> szErrorMsg,
    int cbErrorMsgMax,
    ffi.Pointer<SQLSMALLINT> pcbErrorMsg,
  ) {
    return _SQLGetDiagRecA(
      fHandleType,
      handle,
      iRecord,
      szSqlState,
      pfNativeError,
      szErrorMsg,
      cbErrorMsgMax,
      pcbErrorMsg,
    );
  }

  late final _SQLGetDiagRecAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLSMALLINT,
              SQLHANDLE,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              ffi.Pointer<SQLINTEGER>,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>)>>('SQLGetDiagRecA');
  late final _SQLGetDiagRecA = _SQLGetDiagRecAPtr.asFunction<
      int Function(
          int,
          SQLHANDLE,
          int,
          ffi.Pointer<SQLCHAR>,
          ffi.Pointer<SQLINTEGER>,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLSMALLINT>)>();

  int SQLGetStmtAttrA(
    SQLHSTMT hstmt,
    int fAttribute,
    SQLPOINTER rgbValue,
    int cbValueMax,
    ffi.Pointer<SQLINTEGER> pcbValue,
  ) {
    return _SQLGetStmtAttrA(
      hstmt,
      fAttribute,
      rgbValue,
      cbValueMax,
      pcbValue,
    );
  }

  late final _SQLGetStmtAttrAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHSTMT, SQLINTEGER, SQLPOINTER, SQLINTEGER,
              ffi.Pointer<SQLINTEGER>)>>('SQLGetStmtAttrA');
  late final _SQLGetStmtAttrA = _SQLGetStmtAttrAPtr.asFunction<
      int Function(SQLHSTMT, int, SQLPOINTER, int, ffi.Pointer<SQLINTEGER>)>();

  int SQLGetTypeInfoA(
    SQLHSTMT StatementHandle,
    int DataTyoe,
  ) {
    return _SQLGetTypeInfoA(
      StatementHandle,
      DataTyoe,
    );
  }

  late final _SQLGetTypeInfoAPtr =
      _lookup<ffi.NativeFunction<SQLRETURN Function(SQLHSTMT, SQLSMALLINT)>>(
          'SQLGetTypeInfoA');
  late final _SQLGetTypeInfoA =
      _SQLGetTypeInfoAPtr.asFunction<int Function(SQLHSTMT, int)>();

  int SQLPrepareA(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLCHAR> szSqlStr,
    int cbSqlStr,
  ) {
    return _SQLPrepareA(
      hstmt,
      szSqlStr,
      cbSqlStr,
    );
  }

  late final _SQLPrepareAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT, ffi.Pointer<SQLCHAR>, SQLINTEGER)>>('SQLPrepareA');
  late final _SQLPrepareA = _SQLPrepareAPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLCHAR>, int)>();

  int SQLSetConnectAttrA(
    SQLHDBC hdbc,
    int fAttribute,
    SQLPOINTER rgbValue,
    int cbValue,
  ) {
    return _SQLSetConnectAttrA(
      hdbc,
      fAttribute,
      rgbValue,
      cbValue,
    );
  }

  late final _SQLSetConnectAttrAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHDBC, SQLINTEGER, SQLPOINTER,
              SQLINTEGER)>>('SQLSetConnectAttrA');
  late final _SQLSetConnectAttrA = _SQLSetConnectAttrAPtr.asFunction<
      int Function(SQLHDBC, int, SQLPOINTER, int)>();

  int SQLSetCursorNameA(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLCHAR> szCursor,
    int cbCursor,
  ) {
    return _SQLSetCursorNameA(
      hstmt,
      szCursor,
      cbCursor,
    );
  }

  late final _SQLSetCursorNameAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHSTMT, ffi.Pointer<SQLCHAR>,
              SQLSMALLINT)>>('SQLSetCursorNameA');
  late final _SQLSetCursorNameA = _SQLSetCursorNameAPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLCHAR>, int)>();

  int SQLColumnsA(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLCHAR> szCatalogName,
    int cbCatalogName,
    ffi.Pointer<SQLCHAR> szSchemaName,
    int cbSchemaName,
    ffi.Pointer<SQLCHAR> szTableName,
    int cbTableName,
    ffi.Pointer<SQLCHAR> szColumnName,
    int cbColumnName,
  ) {
    return _SQLColumnsA(
      hstmt,
      szCatalogName,
      cbCatalogName,
      szSchemaName,
      cbSchemaName,
      szTableName,
      cbTableName,
      szColumnName,
      cbColumnName,
    );
  }

  late final _SQLColumnsAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT)>>('SQLColumnsA');
  late final _SQLColumnsA = _SQLColumnsAPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>,
          int, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>, int)>();

  int SQLGetConnectOptionA(
    SQLHDBC hdbc,
    int fOption,
    SQLPOINTER pvParam,
  ) {
    return _SQLGetConnectOptionA(
      hdbc,
      fOption,
      pvParam,
    );
  }

  late final _SQLGetConnectOptionAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHDBC, SQLUSMALLINT, SQLPOINTER)>>('SQLGetConnectOptionA');
  late final _SQLGetConnectOptionA = _SQLGetConnectOptionAPtr.asFunction<
      int Function(SQLHDBC, int, SQLPOINTER)>();

  int SQLGetInfoA(
    SQLHDBC hdbc,
    int fInfoType,
    SQLPOINTER rgbInfoValue,
    int cbInfoValueMax,
    ffi.Pointer<SQLSMALLINT> pcbInfoValue,
  ) {
    return _SQLGetInfoA(
      hdbc,
      fInfoType,
      rgbInfoValue,
      cbInfoValueMax,
      pcbInfoValue,
    );
  }

  late final _SQLGetInfoAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(SQLHDBC, SQLUSMALLINT, SQLPOINTER, SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>)>>('SQLGetInfoA');
  late final _SQLGetInfoA = _SQLGetInfoAPtr.asFunction<
      int Function(SQLHDBC, int, SQLPOINTER, int, ffi.Pointer<SQLSMALLINT>)>();

  int SQLGetStmtOptionA(
    SQLHSTMT hstmt,
    int fOption,
    SQLPOINTER pvParam,
  ) {
    return _SQLGetStmtOptionA(
      hstmt,
      fOption,
      pvParam,
    );
  }

  late final _SQLGetStmtOptionAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT, SQLUSMALLINT, SQLPOINTER)>>('SQLGetStmtOptionA');
  late final _SQLGetStmtOptionA = _SQLGetStmtOptionAPtr.asFunction<
      int Function(SQLHSTMT, int, SQLPOINTER)>();

  int SQLSetConnectOptionA(
    SQLHDBC hdbc,
    int fOption,
    int vParam,
  ) {
    return _SQLSetConnectOptionA(
      hdbc,
      fOption,
      vParam,
    );
  }

  late final _SQLSetConnectOptionAPtr = _lookup<
          ffi
          .NativeFunction<SQLRETURN Function(SQLHDBC, SQLUSMALLINT, SQLULEN)>>(
      'SQLSetConnectOptionA');
  late final _SQLSetConnectOptionA =
      _SQLSetConnectOptionAPtr.asFunction<int Function(SQLHDBC, int, int)>();

  int SQLSetStmtOptionA(
    SQLHSTMT hstmt,
    int fOption,
    int vParam,
  ) {
    return _SQLSetStmtOptionA(
      hstmt,
      fOption,
      vParam,
    );
  }

  late final _SQLSetStmtOptionAPtr = _lookup<
          ffi
          .NativeFunction<SQLRETURN Function(SQLHSTMT, SQLUSMALLINT, SQLULEN)>>(
      'SQLSetStmtOptionA');
  late final _SQLSetStmtOptionA =
      _SQLSetStmtOptionAPtr.asFunction<int Function(SQLHSTMT, int, int)>();

  int SQLSpecialColumnsA(
    SQLHSTMT hstmt,
    int fColType,
    ffi.Pointer<SQLCHAR> szCatalogName,
    int cbCatalogName,
    ffi.Pointer<SQLCHAR> szSchemaName,
    int cbSchemaName,
    ffi.Pointer<SQLCHAR> szTableName,
    int cbTableName,
    int fScope,
    int fNullable,
  ) {
    return _SQLSpecialColumnsA(
      hstmt,
      fColType,
      szCatalogName,
      cbCatalogName,
      szSchemaName,
      cbSchemaName,
      szTableName,
      cbTableName,
      fScope,
      fNullable,
    );
  }

  late final _SQLSpecialColumnsAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              SQLUSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              SQLUSMALLINT,
              SQLUSMALLINT)>>('SQLSpecialColumnsA');
  late final _SQLSpecialColumnsA = _SQLSpecialColumnsAPtr.asFunction<
      int Function(SQLHSTMT, int, ffi.Pointer<SQLCHAR>, int,
          ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>, int, int, int)>();

  int SQLStatisticsA(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLCHAR> szCatalogName,
    int cbCatalogName,
    ffi.Pointer<SQLCHAR> szSchemaName,
    int cbSchemaName,
    ffi.Pointer<SQLCHAR> szTableName,
    int cbTableName,
    int fUnique,
    int fAccuracy,
  ) {
    return _SQLStatisticsA(
      hstmt,
      szCatalogName,
      cbCatalogName,
      szSchemaName,
      cbSchemaName,
      szTableName,
      cbTableName,
      fUnique,
      fAccuracy,
    );
  }

  late final _SQLStatisticsAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              SQLUSMALLINT,
              SQLUSMALLINT)>>('SQLStatisticsA');
  late final _SQLStatisticsA = _SQLStatisticsAPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>,
          int, ffi.Pointer<SQLCHAR>, int, int, int)>();

  int SQLTablesA(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLCHAR> szCatalogName,
    int cbCatalogName,
    ffi.Pointer<SQLCHAR> szSchemaName,
    int cbSchemaName,
    ffi.Pointer<SQLCHAR> szTableName,
    int cbTableName,
    ffi.Pointer<SQLCHAR> szTableType,
    int cbTableType,
  ) {
    return _SQLTablesA(
      hstmt,
      szCatalogName,
      cbCatalogName,
      szSchemaName,
      cbSchemaName,
      szTableName,
      cbTableName,
      szTableType,
      cbTableType,
    );
  }

  late final _SQLTablesAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT)>>('SQLTablesA');
  late final _SQLTablesA = _SQLTablesAPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>,
          int, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>, int)>();

  int SQLDataSourcesA(
    SQLHENV henv,
    int fDirection,
    ffi.Pointer<SQLCHAR> szDSN,
    int cbDSNMax,
    ffi.Pointer<SQLSMALLINT> pcbDSN,
    ffi.Pointer<SQLCHAR> szDescription,
    int cbDescriptionMax,
    ffi.Pointer<SQLSMALLINT> pcbDescription,
  ) {
    return _SQLDataSourcesA(
      henv,
      fDirection,
      szDSN,
      cbDSNMax,
      pcbDSN,
      szDescription,
      cbDescriptionMax,
      pcbDescription,
    );
  }

  late final _SQLDataSourcesAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHENV,
              SQLUSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>)>>('SQLDataSourcesA');
  late final _SQLDataSourcesA = _SQLDataSourcesAPtr.asFunction<
      int Function(
          SQLHENV,
          int,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLSMALLINT>)>();

  int SQLDriverConnectA(
    SQLHDBC hdbc,
    SQLHWND hwnd,
    ffi.Pointer<SQLCHAR> szConnStrIn,
    int cbConnStrIn,
    ffi.Pointer<SQLCHAR> szConnStrOut,
    int cbConnStrOutMax,
    ffi.Pointer<SQLSMALLINT> pcbConnStrOut,
    int fDriverCompletion,
  ) {
    return _SQLDriverConnectA(
      hdbc,
      hwnd,
      szConnStrIn,
      cbConnStrIn,
      szConnStrOut,
      cbConnStrOutMax,
      pcbConnStrOut,
      fDriverCompletion,
    );
  }

  late final _SQLDriverConnectAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHDBC,
              SQLHWND,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>,
              SQLUSMALLINT)>>('SQLDriverConnectA');
  late final _SQLDriverConnectA = _SQLDriverConnectAPtr.asFunction<
      int Function(SQLHDBC, SQLHWND, ffi.Pointer<SQLCHAR>, int,
          ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLSMALLINT>, int)>();

  int SQLBrowseConnectA(
    SQLHDBC hdbc,
    ffi.Pointer<SQLCHAR> szConnStrIn,
    int cbConnStrIn,
    ffi.Pointer<SQLCHAR> szConnStrOut,
    int cbConnStrOutMax,
    ffi.Pointer<SQLSMALLINT> pcbConnStrOut,
  ) {
    return _SQLBrowseConnectA(
      hdbc,
      szConnStrIn,
      cbConnStrIn,
      szConnStrOut,
      cbConnStrOutMax,
      pcbConnStrOut,
    );
  }

  late final _SQLBrowseConnectAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHDBC,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>)>>('SQLBrowseConnectA');
  late final _SQLBrowseConnectA = _SQLBrowseConnectAPtr.asFunction<
      int Function(SQLHDBC, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>,
          int, ffi.Pointer<SQLSMALLINT>)>();

  int SQLColumnPrivilegesA(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLCHAR> szCatalogName,
    int cbCatalogName,
    ffi.Pointer<SQLCHAR> szSchemaName,
    int cbSchemaName,
    ffi.Pointer<SQLCHAR> szTableName,
    int cbTableName,
    ffi.Pointer<SQLCHAR> szColumnName,
    int cbColumnName,
  ) {
    return _SQLColumnPrivilegesA(
      hstmt,
      szCatalogName,
      cbCatalogName,
      szSchemaName,
      cbSchemaName,
      szTableName,
      cbTableName,
      szColumnName,
      cbColumnName,
    );
  }

  late final _SQLColumnPrivilegesAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT)>>('SQLColumnPrivilegesA');
  late final _SQLColumnPrivilegesA = _SQLColumnPrivilegesAPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>,
          int, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>, int)>();

  int SQLDescribeParamA(
    SQLHSTMT hstmt,
    int ipar,
    ffi.Pointer<SQLSMALLINT> pfSqlType,
    ffi.Pointer<SQLUINTEGER> pcbParamDef,
    ffi.Pointer<SQLSMALLINT> pibScale,
    ffi.Pointer<SQLSMALLINT> pfNullable,
  ) {
    return _SQLDescribeParamA(
      hstmt,
      ipar,
      pfSqlType,
      pcbParamDef,
      pibScale,
      pfNullable,
    );
  }

  late final _SQLDescribeParamAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              SQLUSMALLINT,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLUINTEGER>,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLSMALLINT>)>>('SQLDescribeParamA');
  late final _SQLDescribeParamA = _SQLDescribeParamAPtr.asFunction<
      int Function(
          SQLHSTMT,
          int,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLUINTEGER>,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLSMALLINT>)>();

  int SQLForeignKeysA(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLCHAR> szPkCatalogName,
    int cbPkCatalogName,
    ffi.Pointer<SQLCHAR> szPkSchemaName,
    int cbPkSchemaName,
    ffi.Pointer<SQLCHAR> szPkTableName,
    int cbPkTableName,
    ffi.Pointer<SQLCHAR> szFkCatalogName,
    int cbFkCatalogName,
    ffi.Pointer<SQLCHAR> szFkSchemaName,
    int cbFkSchemaName,
    ffi.Pointer<SQLCHAR> szFkTableName,
    int cbFkTableName,
  ) {
    return _SQLForeignKeysA(
      hstmt,
      szPkCatalogName,
      cbPkCatalogName,
      szPkSchemaName,
      cbPkSchemaName,
      szPkTableName,
      cbPkTableName,
      szFkCatalogName,
      cbFkCatalogName,
      szFkSchemaName,
      cbFkSchemaName,
      szFkTableName,
      cbFkTableName,
    );
  }

  late final _SQLForeignKeysAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT)>>('SQLForeignKeysA');
  late final _SQLForeignKeysA = _SQLForeignKeysAPtr.asFunction<
      int Function(
          SQLHSTMT,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLCHAR>,
          int)>();

  int SQLNativeSqlA(
    SQLHDBC hdbc,
    ffi.Pointer<SQLCHAR> szSqlStrIn,
    int cbSqlStrIn,
    ffi.Pointer<SQLCHAR> szSqlStr,
    int cbSqlStrMax,
    ffi.Pointer<SQLINTEGER> pcbSqlStr,
  ) {
    return _SQLNativeSqlA(
      hdbc,
      szSqlStrIn,
      cbSqlStrIn,
      szSqlStr,
      cbSqlStrMax,
      pcbSqlStr,
    );
  }

  late final _SQLNativeSqlAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHDBC,
              ffi.Pointer<SQLCHAR>,
              SQLINTEGER,
              ffi.Pointer<SQLCHAR>,
              SQLINTEGER,
              ffi.Pointer<SQLINTEGER>)>>('SQLNativeSqlA');
  late final _SQLNativeSqlA = _SQLNativeSqlAPtr.asFunction<
      int Function(SQLHDBC, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>,
          int, ffi.Pointer<SQLINTEGER>)>();

  int SQLPrimaryKeysA(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLCHAR> szCatalogName,
    int cbCatalogName,
    ffi.Pointer<SQLCHAR> szSchemaName,
    int cbSchemaName,
    ffi.Pointer<SQLCHAR> szTableName,
    int cbTableName,
  ) {
    return _SQLPrimaryKeysA(
      hstmt,
      szCatalogName,
      cbCatalogName,
      szSchemaName,
      cbSchemaName,
      szTableName,
      cbTableName,
    );
  }

  late final _SQLPrimaryKeysAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT)>>('SQLPrimaryKeysA');
  late final _SQLPrimaryKeysA = _SQLPrimaryKeysAPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>,
          int, ffi.Pointer<SQLCHAR>, int)>();

  int SQLProcedureColumnsA(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLCHAR> szCatalogName,
    int cbCatalogName,
    ffi.Pointer<SQLCHAR> szSchemaName,
    int cbSchemaName,
    ffi.Pointer<SQLCHAR> szProcName,
    int cbProcName,
    ffi.Pointer<SQLCHAR> szColumnName,
    int cbColumnName,
  ) {
    return _SQLProcedureColumnsA(
      hstmt,
      szCatalogName,
      cbCatalogName,
      szSchemaName,
      cbSchemaName,
      szProcName,
      cbProcName,
      szColumnName,
      cbColumnName,
    );
  }

  late final _SQLProcedureColumnsAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT)>>('SQLProcedureColumnsA');
  late final _SQLProcedureColumnsA = _SQLProcedureColumnsAPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>,
          int, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>, int)>();

  int SQLProceduresA(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLCHAR> szCatalogName,
    int cbCatalogName,
    ffi.Pointer<SQLCHAR> szSchemaName,
    int cbSchemaName,
    ffi.Pointer<SQLCHAR> szProcName,
    int cbProcName,
  ) {
    return _SQLProceduresA(
      hstmt,
      szCatalogName,
      cbCatalogName,
      szSchemaName,
      cbSchemaName,
      szProcName,
      cbProcName,
    );
  }

  late final _SQLProceduresAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT)>>('SQLProceduresA');
  late final _SQLProceduresA = _SQLProceduresAPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>,
          int, ffi.Pointer<SQLCHAR>, int)>();

  int SQLTablePrivilegesA(
    SQLHSTMT hstmt,
    ffi.Pointer<SQLCHAR> szCatalogName,
    int cbCatalogName,
    ffi.Pointer<SQLCHAR> szSchemaName,
    int cbSchemaName,
    ffi.Pointer<SQLCHAR> szTableName,
    int cbTableName,
  ) {
    return _SQLTablePrivilegesA(
      hstmt,
      szCatalogName,
      cbCatalogName,
      szSchemaName,
      cbSchemaName,
      szTableName,
      cbTableName,
    );
  }

  late final _SQLTablePrivilegesAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHSTMT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT)>>('SQLTablePrivilegesA');
  late final _SQLTablePrivilegesA = _SQLTablePrivilegesAPtr.asFunction<
      int Function(SQLHSTMT, ffi.Pointer<SQLCHAR>, int, ffi.Pointer<SQLCHAR>,
          int, ffi.Pointer<SQLCHAR>, int)>();

  int SQLDriversA(
    SQLHENV henv,
    int fDirection,
    ffi.Pointer<SQLCHAR> szDriverDesc,
    int cbDriverDescMax,
    ffi.Pointer<SQLSMALLINT> pcbDriverDesc,
    ffi.Pointer<SQLCHAR> szDriverAttributes,
    int cbDrvrAttrMax,
    ffi.Pointer<SQLSMALLINT> pcbDrvrAttr,
  ) {
    return _SQLDriversA(
      henv,
      fDirection,
      szDriverDesc,
      cbDriverDescMax,
      pcbDriverDesc,
      szDriverAttributes,
      cbDrvrAttrMax,
      pcbDrvrAttr,
    );
  }

  late final _SQLDriversAPtr = _lookup<
      ffi.NativeFunction<
          SQLRETURN Function(
              SQLHENV,
              SQLUSMALLINT,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>,
              ffi.Pointer<SQLCHAR>,
              SQLSMALLINT,
              ffi.Pointer<SQLSMALLINT>)>>('SQLDriversA');
  late final _SQLDriversA = _SQLDriversAPtr.asFunction<
      int Function(
          SQLHENV,
          int,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLSMALLINT>,
          ffi.Pointer<SQLCHAR>,
          int,
          ffi.Pointer<SQLSMALLINT>)>();
}

final class tagDATE_STRUCT extends ffi.Struct {
  @SQLSMALLINT()
  external int year;

  @SQLUSMALLINT()
  external int month;

  @SQLUSMALLINT()
  external int day;
}

typedef SQLSMALLINT = ffi.Short;
typedef DartSQLSMALLINT = int;
typedef SQLUSMALLINT = ffi.UnsignedShort;
typedef DartSQLUSMALLINT = int;

final class tagTIME_STRUCT extends ffi.Struct {
  @SQLUSMALLINT()
  external int hour;

  @SQLUSMALLINT()
  external int minute;

  @SQLUSMALLINT()
  external int second;
}

final class tagTIMESTAMP_STRUCT extends ffi.Struct {
  @SQLSMALLINT()
  external int year;

  @SQLUSMALLINT()
  external int month;

  @SQLUSMALLINT()
  external int day;

  @SQLUSMALLINT()
  external int hour;

  @SQLUSMALLINT()
  external int minute;

  @SQLUSMALLINT()
  external int second;

  @SQLUINTEGER()
  external int fraction;
}

typedef SQLUINTEGER = ffi.UnsignedInt;
typedef DartSQLUINTEGER = int;

abstract class SQLINTERVAL {
  static const int SQL_IS_YEAR = 1;
  static const int SQL_IS_MONTH = 2;
  static const int SQL_IS_DAY = 3;
  static const int SQL_IS_HOUR = 4;
  static const int SQL_IS_MINUTE = 5;
  static const int SQL_IS_SECOND = 6;
  static const int SQL_IS_YEAR_TO_MONTH = 7;
  static const int SQL_IS_DAY_TO_HOUR = 8;
  static const int SQL_IS_DAY_TO_MINUTE = 9;
  static const int SQL_IS_DAY_TO_SECOND = 10;
  static const int SQL_IS_HOUR_TO_MINUTE = 11;
  static const int SQL_IS_HOUR_TO_SECOND = 12;
  static const int SQL_IS_MINUTE_TO_SECOND = 13;
}

final class tagSQL_YEAR_MONTH extends ffi.Struct {
  @SQLUINTEGER()
  external int year;

  @SQLUINTEGER()
  external int month;
}

final class tagSQL_DAY_SECOND extends ffi.Struct {
  @SQLUINTEGER()
  external int day;

  @SQLUINTEGER()
  external int hour;

  @SQLUINTEGER()
  external int minute;

  @SQLUINTEGER()
  external int second;

  @SQLUINTEGER()
  external int fraction;
}

final class tagSQL_INTERVAL_STRUCT extends ffi.Struct {
  @ffi.Int32()
  external int interval_type;

  @SQLSMALLINT()
  external int interval_sign;

  external UnnamedUnion1 intval;
}

final class UnnamedUnion1 extends ffi.Union {
  external SQL_YEAR_MONTH_STRUCT year_month;

  external SQL_DAY_SECOND_STRUCT day_second;
}

typedef SQL_YEAR_MONTH_STRUCT = tagSQL_YEAR_MONTH;
typedef SQL_DAY_SECOND_STRUCT = tagSQL_DAY_SECOND;

final class tagSQL_NUMERIC_STRUCT extends ffi.Struct {
  @SQLCHAR()
  external int precision;

  @SQLSCHAR()
  external int scale;

  @SQLCHAR()
  external int sign;

  @ffi.Array.multi([16])
  external ffi.Array<SQLCHAR> val;
}

typedef SQLCHAR = ffi.UnsignedChar;
typedef DartSQLCHAR = int;
typedef SQLSCHAR = SCHAR;
typedef SCHAR = ffi.SignedChar;
typedef DartSCHAR = int;

final class tagSQLGUID extends ffi.Struct {
  @DWORD()
  external int Data1;

  @WORD()
  external int Data2;

  @WORD()
  external int Data3;

  @ffi.Array.multi([8])
  external ffi.Array<BYTE> Data4;
}

typedef DWORD = ffi.UnsignedInt;
typedef DartDWORD = int;
typedef WORD = ffi.UnsignedShort;
typedef DartWORD = int;
typedef BYTE = ffi.UnsignedChar;
typedef DartBYTE = int;
typedef SQLRETURN = SQLSMALLINT;
typedef SQLHENV = SQLHANDLE;
typedef SQLHANDLE = ffi.Pointer<ffi.Void>;
typedef SQLHDBC = SQLHANDLE;
typedef SQLHSTMT = SQLHANDLE;
typedef SQLPOINTER = ffi.Pointer<ffi.Void>;
typedef SQLLEN = ffi.Long;
typedef DartSQLLEN = int;
typedef SQLULEN = ffi.UnsignedLong;
typedef DartSQLULEN = int;
typedef SQLHDESC = SQLHANDLE;
typedef SQLINTEGER = ffi.Int;
typedef DartSQLINTEGER = int;
typedef SQLHWND = ffi.Pointer<ffi.Void>;
typedef SQLSETPOSIROW = ffi.UnsignedLong;
typedef DartSQLSETPOSIROW = int;
typedef RETCODE = ffi.Short;
typedef DartRETCODE = int;
typedef LPSTR = ffi.Pointer<ffi.Char>;

final class tagODBC_VS_ARGS extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pguidEvent;

  @DWORD()
  external int dwFlags;

  external UnnamedUnion2 u1;

  external UnnamedUnion3 u2;

  @RETCODE()
  external int RetCode;
}

final class UnnamedUnion2 extends ffi.Union {
  external ffi.Pointer<WCHAR> wszArg;

  external ffi.Pointer<CHAR> szArg;
}

typedef WCHAR = ffi.UnsignedShort;
typedef DartWCHAR = int;
typedef CHAR = ffi.Char;
typedef DartCHAR = int;

final class UnnamedUnion3 extends ffi.Union {
  external ffi.Pointer<WCHAR> wszCorrelation;

  external ffi.Pointer<CHAR> szCorrelation;
}

typedef PODBC_VS_ARGS = ffi.Pointer<tagODBC_VS_ARGS>;
typedef SQLWCHAR = WCHAR;

const int ODBCVER = 896;

const int HAVE_LONG_LONG = 1;

const int HAVE_PWD_H = 1;

const int HAVE_SYS_TYPES_H = 1;

const int HAVE_UNISTD_H = 1;

const int SIZEOF_LONG_INT = 8;

const String ODBCINT64_TYPE = 'long';

const String UODBCINT64_TYPE = 'unsigned long';

const int SQL_MAX_NUMERIC_LEN = 16;

const int SQL_NULL_DATA = -1;

const int SQL_DATA_AT_EXEC = -2;

const int SQL_SUCCESS = 0;

const int SQL_SUCCESS_WITH_INFO = 1;

const int SQL_NO_DATA = 100;

const int SQL_ERROR = -1;

const int SQL_INVALID_HANDLE = -2;

const int SQL_STILL_EXECUTING = 2;

const int SQL_NEED_DATA = 99;

const int SQL_PARAM_DATA_AVAILABLE = 101;

const int SQL_NTS = -3;

const int SQL_NTSL = -3;

const int SQL_MAX_MESSAGE_LENGTH = 512;

const int SQL_DATE_LEN = 10;

const int SQL_TIME_LEN = 8;

const int SQL_TIMESTAMP_LEN = 19;

const int SQL_HANDLE_ENV = 1;

const int SQL_HANDLE_DBC = 2;

const int SQL_HANDLE_STMT = 3;

const int SQL_HANDLE_DESC = 4;

const int SQL_ATTR_OUTPUT_NTS = 10001;

const int SQL_ATTR_AUTO_IPD = 10001;

const int SQL_ATTR_METADATA_ID = 10014;

const int SQL_ATTR_APP_ROW_DESC = 10010;

const int SQL_ATTR_APP_PARAM_DESC = 10011;

const int SQL_ATTR_IMP_ROW_DESC = 10012;

const int SQL_ATTR_IMP_PARAM_DESC = 10013;

const int SQL_ATTR_CURSOR_SCROLLABLE = -1;

const int SQL_ATTR_CURSOR_SENSITIVITY = -2;

const int SQL_NONSCROLLABLE = 0;

const int SQL_SCROLLABLE = 1;

const int SQL_DESC_COUNT = 1001;

const int SQL_DESC_TYPE = 1002;

const int SQL_DESC_LENGTH = 1003;

const int SQL_DESC_OCTET_LENGTH_PTR = 1004;

const int SQL_DESC_PRECISION = 1005;

const int SQL_DESC_SCALE = 1006;

const int SQL_DESC_DATETIME_INTERVAL_CODE = 1007;

const int SQL_DESC_NULLABLE = 1008;

const int SQL_DESC_INDICATOR_PTR = 1009;

const int SQL_DESC_DATA_PTR = 1010;

const int SQL_DESC_NAME = 1011;

const int SQL_DESC_UNNAMED = 1012;

const int SQL_DESC_OCTET_LENGTH = 1013;

const int SQL_DESC_ALLOC_TYPE = 1099;

const int SQL_DIAG_RETURNCODE = 1;

const int SQL_DIAG_NUMBER = 2;

const int SQL_DIAG_ROW_COUNT = 3;

const int SQL_DIAG_SQLSTATE = 4;

const int SQL_DIAG_NATIVE = 5;

const int SQL_DIAG_MESSAGE_TEXT = 6;

const int SQL_DIAG_DYNAMIC_FUNCTION = 7;

const int SQL_DIAG_CLASS_ORIGIN = 8;

const int SQL_DIAG_SUBCLASS_ORIGIN = 9;

const int SQL_DIAG_CONNECTION_NAME = 10;

const int SQL_DIAG_SERVER_NAME = 11;

const int SQL_DIAG_DYNAMIC_FUNCTION_CODE = 12;

const int SQL_DIAG_ALTER_DOMAIN = 3;

const int SQL_DIAG_ALTER_TABLE = 4;

const int SQL_DIAG_CALL = 7;

const int SQL_DIAG_CREATE_ASSERTION = 6;

const int SQL_DIAG_CREATE_CHARACTER_SET = 8;

const int SQL_DIAG_CREATE_COLLATION = 10;

const int SQL_DIAG_CREATE_DOMAIN = 23;

const int SQL_DIAG_CREATE_INDEX = -1;

const int SQL_DIAG_CREATE_SCHEMA = 64;

const int SQL_DIAG_CREATE_TABLE = 77;

const int SQL_DIAG_CREATE_TRANSLATION = 79;

const int SQL_DIAG_CREATE_VIEW = 84;

const int SQL_DIAG_DELETE_WHERE = 19;

const int SQL_DIAG_DROP_ASSERTION = 24;

const int SQL_DIAG_DROP_CHARACTER_SET = 25;

const int SQL_DIAG_DROP_COLLATION = 26;

const int SQL_DIAG_DROP_DOMAIN = 27;

const int SQL_DIAG_DROP_INDEX = -2;

const int SQL_DIAG_DROP_SCHEMA = 31;

const int SQL_DIAG_DROP_TABLE = 32;

const int SQL_DIAG_DROP_TRANSLATION = 33;

const int SQL_DIAG_DROP_VIEW = 36;

const int SQL_DIAG_DYNAMIC_DELETE_CURSOR = 38;

const int SQL_DIAG_DYNAMIC_UPDATE_CURSOR = 81;

const int SQL_DIAG_GRANT = 48;

const int SQL_DIAG_INSERT = 50;

const int SQL_DIAG_REVOKE = 59;

const int SQL_DIAG_SELECT_CURSOR = 85;

const int SQL_DIAG_UNKNOWN_STATEMENT = 0;

const int SQL_DIAG_UPDATE_WHERE = 82;

const int SQL_UNKNOWN_TYPE = 0;

const int SQL_CHAR = 1;

const int SQL_NUMERIC = 2;

const int SQL_DECIMAL = 3;

const int SQL_INTEGER = 4;

const int SQL_SMALLINT = 5;

const int SQL_FLOAT = 6;

const int SQL_REAL = 7;

const int SQL_DOUBLE = 8;

const int SQL_DATETIME = 9;

const int SQL_VARCHAR = 12;

const int SQL_TYPE_DATE = 91;

const int SQL_TYPE_TIME = 92;

const int SQL_TYPE_TIMESTAMP = 93;

const int SQL_UNSPECIFIED = 0;

const int SQL_INSENSITIVE = 1;

const int SQL_SENSITIVE = 2;

const int SQL_ALL_TYPES = 0;

const int SQL_DEFAULT = 99;

const int SQL_ARD_TYPE = -99;

const int SQL_CODE_DATE = 1;

const int SQL_CODE_TIME = 2;

const int SQL_CODE_TIMESTAMP = 3;

const int SQL_FALSE = 0;

const int SQL_TRUE = 1;

const int SQL_NO_NULLS = 0;

const int SQL_NULLABLE = 1;

const int SQL_NULLABLE_UNKNOWN = 2;

const int SQL_PRED_NONE = 0;

const int SQL_PRED_CHAR = 1;

const int SQL_PRED_BASIC = 2;

const int SQL_NAMED = 0;

const int SQL_UNNAMED = 1;

const int SQL_DESC_ALLOC_AUTO = 1;

const int SQL_DESC_ALLOC_USER = 2;

const int SQL_CLOSE = 0;

const int SQL_DROP = 1;

const int SQL_UNBIND = 2;

const int SQL_RESET_PARAMS = 3;

const int SQL_FETCH_NEXT = 1;

const int SQL_FETCH_FIRST = 2;

const int SQL_FETCH_LAST = 3;

const int SQL_FETCH_PRIOR = 4;

const int SQL_FETCH_ABSOLUTE = 5;

const int SQL_FETCH_RELATIVE = 6;

const int SQL_COMMIT = 0;

const int SQL_ROLLBACK = 1;

const int SQL_NULL_HENV = 0;

const int SQL_NULL_HDBC = 0;

const int SQL_NULL_HSTMT = 0;

const int SQL_NULL_HDESC = 0;

const int SQL_NULL_DESC = 0;

const int SQL_NULL_HANDLE = 0;

const int SQL_SCOPE_CURROW = 0;

const int SQL_SCOPE_TRANSACTION = 1;

const int SQL_SCOPE_SESSION = 2;

const int SQL_PC_UNKNOWN = 0;

const int SQL_PC_NON_PSEUDO = 1;

const int SQL_PC_PSEUDO = 2;

const int SQL_ROW_IDENTIFIER = 1;

const int SQL_INDEX_UNIQUE = 0;

const int SQL_INDEX_ALL = 1;

const int SQL_INDEX_CLUSTERED = 1;

const int SQL_INDEX_HASHED = 2;

const int SQL_INDEX_OTHER = 3;

const int SQL_API_SQLALLOCCONNECT = 1;

const int SQL_API_SQLALLOCENV = 2;

const int SQL_API_SQLALLOCHANDLE = 1001;

const int SQL_API_SQLALLOCSTMT = 3;

const int SQL_API_SQLBINDCOL = 4;

const int SQL_API_SQLBINDPARAM = 1002;

const int SQL_API_SQLCANCEL = 5;

const int SQL_API_SQLCLOSECURSOR = 1003;

const int SQL_API_SQLCOLATTRIBUTE = 6;

const int SQL_API_SQLCOLUMNS = 40;

const int SQL_API_SQLCONNECT = 7;

const int SQL_API_SQLCOPYDESC = 1004;

const int SQL_API_SQLDATASOURCES = 57;

const int SQL_API_SQLDESCRIBECOL = 8;

const int SQL_API_SQLDISCONNECT = 9;

const int SQL_API_SQLENDTRAN = 1005;

const int SQL_API_SQLERROR = 10;

const int SQL_API_SQLEXECDIRECT = 11;

const int SQL_API_SQLEXECUTE = 12;

const int SQL_API_SQLFETCH = 13;

const int SQL_API_SQLFETCHSCROLL = 1021;

const int SQL_API_SQLFREECONNECT = 14;

const int SQL_API_SQLFREEENV = 15;

const int SQL_API_SQLFREEHANDLE = 1006;

const int SQL_API_SQLFREESTMT = 16;

const int SQL_API_SQLGETCONNECTATTR = 1007;

const int SQL_API_SQLGETCONNECTOPTION = 42;

const int SQL_API_SQLGETCURSORNAME = 17;

const int SQL_API_SQLGETDATA = 43;

const int SQL_API_SQLGETDESCFIELD = 1008;

const int SQL_API_SQLGETDESCREC = 1009;

const int SQL_API_SQLGETDIAGFIELD = 1010;

const int SQL_API_SQLGETDIAGREC = 1011;

const int SQL_API_SQLGETENVATTR = 1012;

const int SQL_API_SQLGETFUNCTIONS = 44;

const int SQL_API_SQLGETINFO = 45;

const int SQL_API_SQLGETSTMTATTR = 1014;

const int SQL_API_SQLGETSTMTOPTION = 46;

const int SQL_API_SQLGETTYPEINFO = 47;

const int SQL_API_SQLNUMRESULTCOLS = 18;

const int SQL_API_SQLPARAMDATA = 48;

const int SQL_API_SQLPREPARE = 19;

const int SQL_API_SQLPUTDATA = 49;

const int SQL_API_SQLROWCOUNT = 20;

const int SQL_API_SQLSETCONNECTATTR = 1016;

const int SQL_API_SQLSETCONNECTOPTION = 50;

const int SQL_API_SQLSETCURSORNAME = 21;

const int SQL_API_SQLSETDESCFIELD = 1017;

const int SQL_API_SQLSETDESCREC = 1018;

const int SQL_API_SQLSETENVATTR = 1019;

const int SQL_API_SQLSETPARAM = 22;

const int SQL_API_SQLSETSTMTATTR = 1020;

const int SQL_API_SQLSETSTMTOPTION = 51;

const int SQL_API_SQLSPECIALCOLUMNS = 52;

const int SQL_API_SQLSTATISTICS = 53;

const int SQL_API_SQLTABLES = 54;

const int SQL_API_SQLTRANSACT = 23;

const int SQL_API_SQLCANCELHANDLE = 1022;

const int SQL_MAX_DRIVER_CONNECTIONS = 0;

const int SQL_MAXIMUM_DRIVER_CONNECTIONS = 0;

const int SQL_MAX_CONCURRENT_ACTIVITIES = 1;

const int SQL_MAXIMUM_CONCURRENT_ACTIVITIES = 1;

const int SQL_DATA_SOURCE_NAME = 2;

const int SQL_FETCH_DIRECTION = 8;

const int SQL_SERVER_NAME = 13;

const int SQL_SEARCH_PATTERN_ESCAPE = 14;

const int SQL_DBMS_NAME = 17;

const int SQL_DBMS_VER = 18;

const int SQL_ACCESSIBLE_TABLES = 19;

const int SQL_ACCESSIBLE_PROCEDURES = 20;

const int SQL_CURSOR_COMMIT_BEHAVIOR = 23;

const int SQL_DATA_SOURCE_READ_ONLY = 25;

const int SQL_DEFAULT_TXN_ISOLATION = 26;

const int SQL_IDENTIFIER_CASE = 28;

const int SQL_IDENTIFIER_QUOTE_CHAR = 29;

const int SQL_MAX_COLUMN_NAME_LEN = 30;

const int SQL_MAXIMUM_COLUMN_NAME_LENGTH = 30;

const int SQL_MAX_CURSOR_NAME_LEN = 31;

const int SQL_MAXIMUM_CURSOR_NAME_LENGTH = 31;

const int SQL_MAX_SCHEMA_NAME_LEN = 32;

const int SQL_MAXIMUM_SCHEMA_NAME_LENGTH = 32;

const int SQL_MAX_CATALOG_NAME_LEN = 34;

const int SQL_MAXIMUM_CATALOG_NAME_LENGTH = 34;

const int SQL_MAX_TABLE_NAME_LEN = 35;

const int SQL_SCROLL_CONCURRENCY = 43;

const int SQL_TXN_CAPABLE = 46;

const int SQL_TRANSACTION_CAPABLE = 46;

const int SQL_USER_NAME = 47;

const int SQL_TXN_ISOLATION_OPTION = 72;

const int SQL_TRANSACTION_ISOLATION_OPTION = 72;

const int SQL_INTEGRITY = 73;

const int SQL_GETDATA_EXTENSIONS = 81;

const int SQL_NULL_COLLATION = 85;

const int SQL_ALTER_TABLE = 86;

const int SQL_ORDER_BY_COLUMNS_IN_SELECT = 90;

const int SQL_SPECIAL_CHARACTERS = 94;

const int SQL_MAX_COLUMNS_IN_GROUP_BY = 97;

const int SQL_MAXIMUM_COLUMNS_IN_GROUP_BY = 97;

const int SQL_MAX_COLUMNS_IN_INDEX = 98;

const int SQL_MAXIMUM_COLUMNS_IN_INDEX = 98;

const int SQL_MAX_COLUMNS_IN_ORDER_BY = 99;

const int SQL_MAXIMUM_COLUMNS_IN_ORDER_BY = 99;

const int SQL_MAX_COLUMNS_IN_SELECT = 100;

const int SQL_MAXIMUM_COLUMNS_IN_SELECT = 100;

const int SQL_MAX_COLUMNS_IN_TABLE = 101;

const int SQL_MAX_INDEX_SIZE = 102;

const int SQL_MAXIMUM_INDEX_SIZE = 102;

const int SQL_MAX_ROW_SIZE = 104;

const int SQL_MAXIMUM_ROW_SIZE = 104;

const int SQL_MAX_STATEMENT_LEN = 105;

const int SQL_MAXIMUM_STATEMENT_LENGTH = 105;

const int SQL_MAX_TABLES_IN_SELECT = 106;

const int SQL_MAXIMUM_TABLES_IN_SELECT = 106;

const int SQL_MAX_USER_NAME_LEN = 107;

const int SQL_MAXIMUM_USER_NAME_LENGTH = 107;

const int SQL_OJ_CAPABILITIES = 115;

const int SQL_OUTER_JOIN_CAPABILITIES = 115;

const int SQL_XOPEN_CLI_YEAR = 10000;

const int SQL_CURSOR_SENSITIVITY = 10001;

const int SQL_DESCRIBE_PARAMETER = 10002;

const int SQL_CATALOG_NAME = 10003;

const int SQL_COLLATION_SEQ = 10004;

const int SQL_MAX_IDENTIFIER_LEN = 10005;

const int SQL_MAXIMUM_IDENTIFIER_LENGTH = 10005;

const int SQL_AT_ADD_COLUMN = 1;

const int SQL_AT_DROP_COLUMN = 2;

const int SQL_AT_ADD_CONSTRAINT = 8;

const int SQL_AM_NONE = 0;

const int SQL_AM_CONNECTION = 1;

const int SQL_AM_STATEMENT = 2;

const int SQL_CB_DELETE = 0;

const int SQL_CB_CLOSE = 1;

const int SQL_CB_PRESERVE = 2;

const int SQL_FD_FETCH_NEXT = 1;

const int SQL_FD_FETCH_FIRST = 2;

const int SQL_FD_FETCH_LAST = 4;

const int SQL_FD_FETCH_PRIOR = 8;

const int SQL_FD_FETCH_ABSOLUTE = 16;

const int SQL_FD_FETCH_RELATIVE = 32;

const int SQL_GD_ANY_COLUMN = 1;

const int SQL_GD_ANY_ORDER = 2;

const int SQL_IC_UPPER = 1;

const int SQL_IC_LOWER = 2;

const int SQL_IC_SENSITIVE = 3;

const int SQL_IC_MIXED = 4;

const int SQL_OJ_LEFT = 1;

const int SQL_OJ_RIGHT = 2;

const int SQL_OJ_FULL = 4;

const int SQL_OJ_NESTED = 8;

const int SQL_OJ_NOT_ORDERED = 16;

const int SQL_OJ_INNER = 32;

const int SQL_OJ_ALL_COMPARISON_OPS = 64;

const int SQL_SCCO_READ_ONLY = 1;

const int SQL_SCCO_LOCK = 2;

const int SQL_SCCO_OPT_ROWVER = 4;

const int SQL_SCCO_OPT_VALUES = 8;

const int SQL_TC_NONE = 0;

const int SQL_TC_DML = 1;

const int SQL_TC_ALL = 2;

const int SQL_TC_DDL_COMMIT = 3;

const int SQL_TC_DDL_IGNORE = 4;

const int SQL_TXN_READ_UNCOMMITTED = 1;

const int SQL_TRANSACTION_READ_UNCOMMITTED = 1;

const int SQL_TXN_READ_COMMITTED = 2;

const int SQL_TRANSACTION_READ_COMMITTED = 2;

const int SQL_TXN_REPEATABLE_READ = 4;

const int SQL_TRANSACTION_REPEATABLE_READ = 4;

const int SQL_TXN_SERIALIZABLE = 8;

const int SQL_TRANSACTION_SERIALIZABLE = 8;

const int SQL_NC_HIGH = 0;

const int SQL_NC_LOW = 1;

const int SQLTables_TABLE_CATALOG = 1;

const int SQLTables_TABLE_SCHEM = 2;

const int SQLTables_TABLE_NAME = 3;

const int SQLTables_TABLE_TYPE = 4;

const int SQLTables_REMARKS = 5;

const int SQLColumns_TABLE_CAT = 1;

const int SQLColumns_TABLE_SCHEM = 2;

const int SQLColumns_TABLE_NAME = 3;

const int SQLColumns_COLUMN_NAME = 4;

const int SQLColumns_DATA_TYPE = 5;

const int SQLColumns_TYPE_NAME = 6;

const int SQLColumns_COLUMN_SIZE = 7;

const int SQLColumns_BUFFER_LENGTH = 8;

const int SQLColumns_DECIMAL_DIGITS = 9;

const int SQLColumns_NUM_PREC_RADIX = 10;

const int SQLColumns_NULLABLE = 11;

const int SQLColumns_REMARKS = 12;

const int SQLColumns_COLUMN_DEF = 13;

const int SQLColumns_SQL_DATA_TYPE = 14;

const int SQLColumns_SQL_DATETIME_SUB = 15;

const int SQLColumns_CHAR_OCTET_LENGTH = 16;

const int SQLColumns_ORDINAL_POSITION = 17;

const int SQLColumns_IS_NULLABLE = 18;

const int SQL_SPEC_MAJOR = 3;

const int SQL_SPEC_MINOR = 52;

const String SQL_SPEC_STRING = '03.52';

const int SQL_SQLSTATE_SIZE = 5;

const int SQL_MAX_DSN_LENGTH = 32;

const int SQL_MAX_OPTION_STRING_LENGTH = 256;

const int SQL_NO_DATA_FOUND = 100;

const int SQL_HANDLE_SENV = 5;

const int SQL_ATTR_ODBC_VERSION = 200;

const int SQL_ATTR_CONNECTION_POOLING = 201;

const int SQL_ATTR_CP_MATCH = 202;

const int SQL_ATTR_UNIXODBC_SYSPATH = 65001;

const int SQL_ATTR_UNIXODBC_VERSION = 65002;

const int SQL_ATTR_UNIXODBC_ENVATTR = 65003;

const int SQL_CP_OFF = 0;

const int SQL_CP_ONE_PER_DRIVER = 1;

const int SQL_CP_ONE_PER_HENV = 2;

const int SQL_CP_DEFAULT = 0;

const int SQL_CP_STRICT_MATCH = 0;

const int SQL_CP_RELAXED_MATCH = 1;

const int SQL_CP_MATCH_DEFAULT = 0;

const int SQL_OV_ODBC2 = 2;

const int SQL_OV_ODBC3 = 3;

const int SQL_OV_ODBC3_80 = 380;

const int SQL_ACCESS_MODE = 101;

const int SQL_AUTOCOMMIT = 102;

const int SQL_LOGIN_TIMEOUT = 103;

const int SQL_OPT_TRACE = 104;

const int SQL_OPT_TRACEFILE = 105;

const int SQL_TRANSLATE_DLL = 106;

const int SQL_TRANSLATE_OPTION = 107;

const int SQL_TXN_ISOLATION = 108;

const int SQL_CURRENT_QUALIFIER = 109;

const int SQL_ODBC_CURSORS = 110;

const int SQL_QUIET_MODE = 111;

const int SQL_PACKET_SIZE = 112;

const int SQL_ATTR_ACCESS_MODE = 101;

const int SQL_ATTR_AUTOCOMMIT = 102;

const int SQL_ATTR_CONNECTION_TIMEOUT = 113;

const int SQL_ATTR_CURRENT_CATALOG = 109;

const int SQL_ATTR_DISCONNECT_BEHAVIOR = 114;

const int SQL_ATTR_ENLIST_IN_DTC = 1207;

const int SQL_ATTR_ENLIST_IN_XA = 1208;

const int SQL_ATTR_LOGIN_TIMEOUT = 103;

const int SQL_ATTR_ODBC_CURSORS = 110;

const int SQL_ATTR_PACKET_SIZE = 112;

const int SQL_ATTR_QUIET_MODE = 111;

const int SQL_ATTR_TRACE = 104;

const int SQL_ATTR_TRACEFILE = 105;

const int SQL_ATTR_TRANSLATE_LIB = 106;

const int SQL_ATTR_TRANSLATE_OPTION = 107;

const int SQL_ATTR_TXN_ISOLATION = 108;

const int SQL_ATTR_CONNECTION_DEAD = 1209;

const int SQL_ATTR_DRIVER_THREADING = 1028;

const int SQL_ATTR_ANSI_APP = 115;

const int SQL_ATTR_RESET_CONNECTION = 116;

const int SQL_ATTR_ASYNC_DBC_FUNCTIONS_ENABLE = 117;

const int SQL_MODE_READ_WRITE = 0;

const int SQL_MODE_READ_ONLY = 1;

const int SQL_MODE_DEFAULT = 0;

const int SQL_AUTOCOMMIT_OFF = 0;

const int SQL_AUTOCOMMIT_ON = 1;

const int SQL_AUTOCOMMIT_DEFAULT = 1;

const int SQL_LOGIN_TIMEOUT_DEFAULT = 15;

const int SQL_OPT_TRACE_OFF = 0;

const int SQL_OPT_TRACE_ON = 1;

const int SQL_OPT_TRACE_DEFAULT = 0;

const String SQL_OPT_TRACE_FILE_DEFAULT = '/tmp/SQL.LOG';

const int SQL_CUR_USE_IF_NEEDED = 0;

const int SQL_CUR_USE_ODBC = 1;

const int SQL_CUR_USE_DRIVER = 2;

const int SQL_CUR_DEFAULT = 2;

const int SQL_DB_RETURN_TO_POOL = 0;

const int SQL_DB_DISCONNECT = 1;

const int SQL_DB_DEFAULT = 0;

const int SQL_DTC_DONE = 0;

const int SQL_CD_TRUE = 1;

const int SQL_CD_FALSE = 0;

const int SQL_AA_TRUE = 1;

const int SQL_AA_FALSE = 0;

const int SQL_RESET_CONNECTION_YES = 1;

const int SQL_ASYNC_DBC_ENABLE_ON = 1;

const int SQL_ASYNC_DBC_ENABLE_OFF = 0;

const int SQL_ASYNC_DBC_ENABLE_DEFAULT = 0;

const int SQL_QUERY_TIMEOUT = 0;

const int SQL_MAX_ROWS = 1;

const int SQL_NOSCAN = 2;

const int SQL_MAX_LENGTH = 3;

const int SQL_ASYNC_ENABLE = 4;

const int SQL_BIND_TYPE = 5;

const int SQL_CURSOR_TYPE = 6;

const int SQL_CONCURRENCY = 7;

const int SQL_KEYSET_SIZE = 8;

const int SQL_ROWSET_SIZE = 9;

const int SQL_SIMULATE_CURSOR = 10;

const int SQL_RETRIEVE_DATA = 11;

const int SQL_USE_BOOKMARKS = 12;

const int SQL_GET_BOOKMARK = 13;

const int SQL_ROW_NUMBER = 14;

const int SQL_ATTR_ASYNC_ENABLE = 4;

const int SQL_ATTR_CONCURRENCY = 7;

const int SQL_ATTR_CURSOR_TYPE = 6;

const int SQL_ATTR_ENABLE_AUTO_IPD = 15;

const int SQL_ATTR_FETCH_BOOKMARK_PTR = 16;

const int SQL_ATTR_KEYSET_SIZE = 8;

const int SQL_ATTR_MAX_LENGTH = 3;

const int SQL_ATTR_MAX_ROWS = 1;

const int SQL_ATTR_NOSCAN = 2;

const int SQL_ATTR_PARAM_BIND_OFFSET_PTR = 17;

const int SQL_ATTR_PARAM_BIND_TYPE = 18;

const int SQL_ATTR_PARAM_OPERATION_PTR = 19;

const int SQL_ATTR_PARAM_STATUS_PTR = 20;

const int SQL_ATTR_PARAMS_PROCESSED_PTR = 21;

const int SQL_ATTR_PARAMSET_SIZE = 22;

const int SQL_ATTR_QUERY_TIMEOUT = 0;

const int SQL_ATTR_RETRIEVE_DATA = 11;

const int SQL_ATTR_ROW_BIND_OFFSET_PTR = 23;

const int SQL_ATTR_ROW_BIND_TYPE = 5;

const int SQL_ATTR_ROW_NUMBER = 14;

const int SQL_ATTR_ROW_OPERATION_PTR = 24;

const int SQL_ATTR_ROW_STATUS_PTR = 25;

const int SQL_ATTR_ROWS_FETCHED_PTR = 26;

const int SQL_ATTR_ROW_ARRAY_SIZE = 27;

const int SQL_ATTR_SIMULATE_CURSOR = 10;

const int SQL_ATTR_USE_BOOKMARKS = 12;

const int SQL_ATTR_ASYNC_STMT_EVENT = 29;

const int SQL_COL_PRED_CHAR = 1;

const int SQL_COL_PRED_BASIC = 2;

const int SQL_IS_POINTER = -4;

const int SQL_IS_UINTEGER = -5;

const int SQL_IS_INTEGER = -6;

const int SQL_IS_USMALLINT = -7;

const int SQL_IS_SMALLINT = -8;

const int SQL_PARAM_BIND_BY_COLUMN = 0;

const int SQL_PARAM_BIND_TYPE_DEFAULT = 0;

const int SQL_QUERY_TIMEOUT_DEFAULT = 0;

const int SQL_MAX_ROWS_DEFAULT = 0;

const int SQL_NOSCAN_OFF = 0;

const int SQL_NOSCAN_ON = 1;

const int SQL_NOSCAN_DEFAULT = 0;

const int SQL_MAX_LENGTH_DEFAULT = 0;

const int SQL_ASYNC_ENABLE_OFF = 0;

const int SQL_ASYNC_ENABLE_ON = 1;

const int SQL_ASYNC_ENABLE_DEFAULT = 0;

const int SQL_BIND_BY_COLUMN = 0;

const int SQL_BIND_TYPE_DEFAULT = 0;

const int SQL_CONCUR_READ_ONLY = 1;

const int SQL_CONCUR_LOCK = 2;

const int SQL_CONCUR_ROWVER = 3;

const int SQL_CONCUR_VALUES = 4;

const int SQL_CONCUR_DEFAULT = 1;

const int SQL_CURSOR_FORWARD_ONLY = 0;

const int SQL_CURSOR_KEYSET_DRIVEN = 1;

const int SQL_CURSOR_DYNAMIC = 2;

const int SQL_CURSOR_STATIC = 3;

const int SQL_CURSOR_TYPE_DEFAULT = 0;

const int SQL_ROWSET_SIZE_DEFAULT = 1;

const int SQL_KEYSET_SIZE_DEFAULT = 0;

const int SQL_SC_NON_UNIQUE = 0;

const int SQL_SC_TRY_UNIQUE = 1;

const int SQL_SC_UNIQUE = 2;

const int SQL_RD_OFF = 0;

const int SQL_RD_ON = 1;

const int SQL_RD_DEFAULT = 1;

const int SQL_UB_OFF = 0;

const int SQL_UB_ON = 1;

const int SQL_UB_DEFAULT = 0;

const int SQL_UB_FIXED = 1;

const int SQL_UB_VARIABLE = 2;

const int SQL_DESC_ARRAY_SIZE = 20;

const int SQL_DESC_ARRAY_STATUS_PTR = 21;

const int SQL_DESC_AUTO_UNIQUE_VALUE = 11;

const int SQL_DESC_BASE_COLUMN_NAME = 22;

const int SQL_DESC_BASE_TABLE_NAME = 23;

const int SQL_DESC_BIND_OFFSET_PTR = 24;

const int SQL_DESC_BIND_TYPE = 25;

const int SQL_DESC_CASE_SENSITIVE = 12;

const int SQL_DESC_CATALOG_NAME = 17;

const int SQL_DESC_CONCISE_TYPE = 2;

const int SQL_DESC_DATETIME_INTERVAL_PRECISION = 26;

const int SQL_DESC_DISPLAY_SIZE = 6;

const int SQL_DESC_FIXED_PREC_SCALE = 9;

const int SQL_DESC_LABEL = 18;

const int SQL_DESC_LITERAL_PREFIX = 27;

const int SQL_DESC_LITERAL_SUFFIX = 28;

const int SQL_DESC_LOCAL_TYPE_NAME = 29;

const int SQL_DESC_MAXIMUM_SCALE = 30;

const int SQL_DESC_MINIMUM_SCALE = 31;

const int SQL_DESC_NUM_PREC_RADIX = 32;

const int SQL_DESC_PARAMETER_TYPE = 33;

const int SQL_DESC_ROWS_PROCESSED_PTR = 34;

const int SQL_DESC_ROWVER = 35;

const int SQL_DESC_SCHEMA_NAME = 16;

const int SQL_DESC_SEARCHABLE = 13;

const int SQL_DESC_TYPE_NAME = 14;

const int SQL_DESC_TABLE_NAME = 15;

const int SQL_DESC_UNSIGNED = 8;

const int SQL_DESC_UPDATABLE = 10;

const int SQL_DIAG_CURSOR_ROW_COUNT = -1249;

const int SQL_DIAG_ROW_NUMBER = -1248;

const int SQL_DIAG_COLUMN_NUMBER = -1247;

const int SQL_DATE = 9;

const int SQL_INTERVAL = 10;

const int SQL_TIME = 10;

const int SQL_TIMESTAMP = 11;

const int SQL_LONGVARCHAR = -1;

const int SQL_BINARY = -2;

const int SQL_VARBINARY = -3;

const int SQL_LONGVARBINARY = -4;

const int SQL_BIGINT = -5;

const int SQL_TINYINT = -6;

const int SQL_BIT = -7;

const int SQL_GUID = -11;

const int SQL_CODE_YEAR = 1;

const int SQL_CODE_MONTH = 2;

const int SQL_CODE_DAY = 3;

const int SQL_CODE_HOUR = 4;

const int SQL_CODE_MINUTE = 5;

const int SQL_CODE_SECOND = 6;

const int SQL_CODE_YEAR_TO_MONTH = 7;

const int SQL_CODE_DAY_TO_HOUR = 8;

const int SQL_CODE_DAY_TO_MINUTE = 9;

const int SQL_CODE_DAY_TO_SECOND = 10;

const int SQL_CODE_HOUR_TO_MINUTE = 11;

const int SQL_CODE_HOUR_TO_SECOND = 12;

const int SQL_CODE_MINUTE_TO_SECOND = 13;

const int SQL_INTERVAL_YEAR = 101;

const int SQL_INTERVAL_MONTH = 102;

const int SQL_INTERVAL_DAY = 103;

const int SQL_INTERVAL_HOUR = 104;

const int SQL_INTERVAL_MINUTE = 105;

const int SQL_INTERVAL_SECOND = 106;

const int SQL_INTERVAL_YEAR_TO_MONTH = 107;

const int SQL_INTERVAL_DAY_TO_HOUR = 108;

const int SQL_INTERVAL_DAY_TO_MINUTE = 109;

const int SQL_INTERVAL_DAY_TO_SECOND = 110;

const int SQL_INTERVAL_HOUR_TO_MINUTE = 111;

const int SQL_INTERVAL_HOUR_TO_SECOND = 112;

const int SQL_INTERVAL_MINUTE_TO_SECOND = 113;

const int SQL_UNICODE = -8;

const int SQL_UNICODE_VARCHAR = -9;

const int SQL_UNICODE_LONGVARCHAR = -10;

const int SQL_UNICODE_CHAR = -8;

const int SQL_C_CHAR = 1;

const int SQL_C_LONG = 4;

const int SQL_C_SHORT = 5;

const int SQL_C_FLOAT = 7;

const int SQL_C_DOUBLE = 8;

const int SQL_C_NUMERIC = 2;

const int SQL_C_DEFAULT = 99;

const int SQL_SIGNED_OFFSET = -20;

const int SQL_UNSIGNED_OFFSET = -22;

const int SQL_C_DATE = 9;

const int SQL_C_TIME = 10;

const int SQL_C_TIMESTAMP = 11;

const int SQL_C_TYPE_DATE = 91;

const int SQL_C_TYPE_TIME = 92;

const int SQL_C_TYPE_TIMESTAMP = 93;

const int SQL_C_INTERVAL_YEAR = 101;

const int SQL_C_INTERVAL_MONTH = 102;

const int SQL_C_INTERVAL_DAY = 103;

const int SQL_C_INTERVAL_HOUR = 104;

const int SQL_C_INTERVAL_MINUTE = 105;

const int SQL_C_INTERVAL_SECOND = 106;

const int SQL_C_INTERVAL_YEAR_TO_MONTH = 107;

const int SQL_C_INTERVAL_DAY_TO_HOUR = 108;

const int SQL_C_INTERVAL_DAY_TO_MINUTE = 109;

const int SQL_C_INTERVAL_DAY_TO_SECOND = 110;

const int SQL_C_INTERVAL_HOUR_TO_MINUTE = 111;

const int SQL_C_INTERVAL_HOUR_TO_SECOND = 112;

const int SQL_C_INTERVAL_MINUTE_TO_SECOND = 113;

const int SQL_C_BINARY = -2;

const int SQL_C_BIT = -7;

const int SQL_C_SBIGINT = -25;

const int SQL_C_UBIGINT = -27;

const int SQL_C_TINYINT = -6;

const int SQL_C_SLONG = -16;

const int SQL_C_SSHORT = -15;

const int SQL_C_STINYINT = -26;

const int SQL_C_ULONG = -18;

const int SQL_C_USHORT = -17;

const int SQL_C_UTINYINT = -28;

const int SQL_C_BOOKMARK = -27;

const int SQL_C_GUID = -11;

const int SQL_TYPE_NULL = 0;

const int SQL_DRIVER_C_TYPE_BASE = 16384;

const int SQL_DRIVER_SQL_TYPE_BASE = 16384;

const int SQL_DRIVER_DESC_FIELD_BASE = 16384;

const int SQL_DRIVER_DIAG_FIELD_BASE = 16384;

const int SQL_DRIVER_INFO_TYPE_BASE = 16384;

const int SQL_DRIVER_CONN_ATTR_BASE = 16384;

const int SQL_DRIVER_STMT_ATTR_BASE = 16384;

const int SQL_C_VARBOOKMARK = -2;

const int SQL_NO_ROW_NUMBER = -1;

const int SQL_NO_COLUMN_NUMBER = -1;

const int SQL_ROW_NUMBER_UNKNOWN = -2;

const int SQL_COLUMN_NUMBER_UNKNOWN = -2;

const int SQL_DEFAULT_PARAM = -5;

const int SQL_IGNORE = -6;

const int SQL_COLUMN_IGNORE = -6;

const int SQL_LEN_DATA_AT_EXEC_OFFSET = -100;

const int SQL_LEN_BINARY_ATTR_OFFSET = -100;

const int SQL_PARAM_TYPE_DEFAULT = 2;

const int SQL_SETPARAM_VALUE_MAX = -1;

const int SQL_COLUMN_COUNT = 0;

const int SQL_COLUMN_NAME = 1;

const int SQL_COLUMN_TYPE = 2;

const int SQL_COLUMN_LENGTH = 3;

const int SQL_COLUMN_PRECISION = 4;

const int SQL_COLUMN_SCALE = 5;

const int SQL_COLUMN_DISPLAY_SIZE = 6;

const int SQL_COLUMN_NULLABLE = 7;

const int SQL_COLUMN_UNSIGNED = 8;

const int SQL_COLUMN_MONEY = 9;

const int SQL_COLUMN_UPDATABLE = 10;

const int SQL_COLUMN_AUTO_INCREMENT = 11;

const int SQL_COLUMN_CASE_SENSITIVE = 12;

const int SQL_COLUMN_SEARCHABLE = 13;

const int SQL_COLUMN_TYPE_NAME = 14;

const int SQL_COLUMN_TABLE_NAME = 15;

const int SQL_COLUMN_OWNER_NAME = 16;

const int SQL_COLUMN_QUALIFIER_NAME = 17;

const int SQL_COLUMN_LABEL = 18;

const int SQL_COLATT_OPT_MAX = 18;

const int SQL_COLATT_OPT_MIN = 0;

const int SQL_ATTR_READONLY = 0;

const int SQL_ATTR_WRITE = 1;

const int SQL_ATTR_READWRITE_UNKNOWN = 2;

const int SQL_UNSEARCHABLE = 0;

const int SQL_LIKE_ONLY = 1;

const int SQL_ALL_EXCEPT_LIKE = 2;

const int SQL_SEARCHABLE = 3;

const int SQL_PRED_SEARCHABLE = 3;

const int SQL_NO_TOTAL = -4;

const int SQL_API_SQLALLOCHANDLESTD = 73;

const int SQL_API_SQLBULKOPERATIONS = 24;

const int SQL_API_SQLBINDPARAMETER = 72;

const int SQL_API_SQLBROWSECONNECT = 55;

const int SQL_API_SQLCOLATTRIBUTES = 6;

const int SQL_API_SQLCOLUMNPRIVILEGES = 56;

const int SQL_API_SQLDESCRIBEPARAM = 58;

const int SQL_API_SQLDRIVERCONNECT = 41;

const int SQL_API_SQLDRIVERS = 71;

const int SQL_API_SQLEXTENDEDFETCH = 59;

const int SQL_API_SQLFOREIGNKEYS = 60;

const int SQL_API_SQLMORERESULTS = 61;

const int SQL_API_SQLNATIVESQL = 62;

const int SQL_API_SQLNUMPARAMS = 63;

const int SQL_API_SQLPARAMOPTIONS = 64;

const int SQL_API_SQLPRIMARYKEYS = 65;

const int SQL_API_SQLPROCEDURECOLUMNS = 66;

const int SQL_API_SQLPROCEDURES = 67;

const int SQL_API_SQLSETPOS = 68;

const int SQL_API_SQLSETSCROLLOPTIONS = 69;

const int SQL_API_SQLTABLEPRIVILEGES = 70;

const int SQL_API_ALL_FUNCTIONS = 0;

const int SQL_API_LOADBYORDINAL = 199;

const int SQL_API_ODBC3_ALL_FUNCTIONS = 999;

const int SQL_API_ODBC3_ALL_FUNCTIONS_SIZE = 250;

const int SQL_INFO_FIRST = 0;

const int SQL_ACTIVE_CONNECTIONS = 0;

const int SQL_ACTIVE_STATEMENTS = 1;

const int SQL_DRIVER_HDBC = 3;

const int SQL_DRIVER_HENV = 4;

const int SQL_DRIVER_HSTMT = 5;

const int SQL_DRIVER_NAME = 6;

const int SQL_DRIVER_VER = 7;

const int SQL_ODBC_API_CONFORMANCE = 9;

const int SQL_ODBC_VER = 10;

const int SQL_ROW_UPDATES = 11;

const int SQL_ODBC_SAG_CLI_CONFORMANCE = 12;

const int SQL_ODBC_SQL_CONFORMANCE = 15;

const int SQL_PROCEDURES = 21;

const int SQL_CONCAT_NULL_BEHAVIOR = 22;

const int SQL_CURSOR_ROLLBACK_BEHAVIOR = 24;

const int SQL_EXPRESSIONS_IN_ORDERBY = 27;

const int SQL_MAX_OWNER_NAME_LEN = 32;

const int SQL_MAX_PROCEDURE_NAME_LEN = 33;

const int SQL_MAX_QUALIFIER_NAME_LEN = 34;

const int SQL_MULT_RESULT_SETS = 36;

const int SQL_MULTIPLE_ACTIVE_TXN = 37;

const int SQL_OUTER_JOINS = 38;

const int SQL_OWNER_TERM = 39;

const int SQL_PROCEDURE_TERM = 40;

const int SQL_QUALIFIER_NAME_SEPARATOR = 41;

const int SQL_QUALIFIER_TERM = 42;

const int SQL_SCROLL_OPTIONS = 44;

const int SQL_TABLE_TERM = 45;

const int SQL_CONVERT_FUNCTIONS = 48;

const int SQL_NUMERIC_FUNCTIONS = 49;

const int SQL_STRING_FUNCTIONS = 50;

const int SQL_SYSTEM_FUNCTIONS = 51;

const int SQL_TIMEDATE_FUNCTIONS = 52;

const int SQL_CONVERT_BIGINT = 53;

const int SQL_CONVERT_BINARY = 54;

const int SQL_CONVERT_BIT = 55;

const int SQL_CONVERT_CHAR = 56;

const int SQL_CONVERT_DATE = 57;

const int SQL_CONVERT_DECIMAL = 58;

const int SQL_CONVERT_DOUBLE = 59;

const int SQL_CONVERT_FLOAT = 60;

const int SQL_CONVERT_INTEGER = 61;

const int SQL_CONVERT_LONGVARCHAR = 62;

const int SQL_CONVERT_NUMERIC = 63;

const int SQL_CONVERT_REAL = 64;

const int SQL_CONVERT_SMALLINT = 65;

const int SQL_CONVERT_TIME = 66;

const int SQL_CONVERT_TIMESTAMP = 67;

const int SQL_CONVERT_TINYINT = 68;

const int SQL_CONVERT_VARBINARY = 69;

const int SQL_CONVERT_VARCHAR = 70;

const int SQL_CONVERT_LONGVARBINARY = 71;

const int SQL_CONVERT_GUID = 173;

const int SQL_ODBC_SQL_OPT_IEF = 73;

const int SQL_CORRELATION_NAME = 74;

const int SQL_NON_NULLABLE_COLUMNS = 75;

const int SQL_DRIVER_HLIB = 76;

const int SQL_DRIVER_ODBC_VER = 77;

const int SQL_LOCK_TYPES = 78;

const int SQL_POS_OPERATIONS = 79;

const int SQL_POSITIONED_STATEMENTS = 80;

const int SQL_BOOKMARK_PERSISTENCE = 82;

const int SQL_STATIC_SENSITIVITY = 83;

const int SQL_FILE_USAGE = 84;

const int SQL_COLUMN_ALIAS = 87;

const int SQL_GROUP_BY = 88;

const int SQL_KEYWORDS = 89;

const int SQL_OWNER_USAGE = 91;

const int SQL_QUALIFIER_USAGE = 92;

const int SQL_QUOTED_IDENTIFIER_CASE = 93;

const int SQL_SUBQUERIES = 95;

const int SQL_UNION = 96;

const int SQL_MAX_ROW_SIZE_INCLUDES_LONG = 103;

const int SQL_MAX_CHAR_LITERAL_LEN = 108;

const int SQL_TIMEDATE_ADD_INTERVALS = 109;

const int SQL_TIMEDATE_DIFF_INTERVALS = 110;

const int SQL_NEED_LONG_DATA_LEN = 111;

const int SQL_MAX_BINARY_LITERAL_LEN = 112;

const int SQL_LIKE_ESCAPE_CLAUSE = 113;

const int SQL_QUALIFIER_LOCATION = 114;

const int SQL_ACTIVE_ENVIRONMENTS = 116;

const int SQL_ALTER_DOMAIN = 117;

const int SQL_SQL_CONFORMANCE = 118;

const int SQL_DATETIME_LITERALS = 119;

const int SQL_ASYNC_MODE = 10021;

const int SQL_BATCH_ROW_COUNT = 120;

const int SQL_BATCH_SUPPORT = 121;

const int SQL_CATALOG_LOCATION = 114;

const int SQL_CATALOG_NAME_SEPARATOR = 41;

const int SQL_CATALOG_TERM = 42;

const int SQL_CATALOG_USAGE = 92;

const int SQL_CONVERT_WCHAR = 122;

const int SQL_CONVERT_INTERVAL_DAY_TIME = 123;

const int SQL_CONVERT_INTERVAL_YEAR_MONTH = 124;

const int SQL_CONVERT_WLONGVARCHAR = 125;

const int SQL_CONVERT_WVARCHAR = 126;

const int SQL_CREATE_ASSERTION = 127;

const int SQL_CREATE_CHARACTER_SET = 128;

const int SQL_CREATE_COLLATION = 129;

const int SQL_CREATE_DOMAIN = 130;

const int SQL_CREATE_SCHEMA = 131;

const int SQL_CREATE_TABLE = 132;

const int SQL_CREATE_TRANSLATION = 133;

const int SQL_CREATE_VIEW = 134;

const int SQL_DRIVER_HDESC = 135;

const int SQL_DROP_ASSERTION = 136;

const int SQL_DROP_CHARACTER_SET = 137;

const int SQL_DROP_COLLATION = 138;

const int SQL_DROP_DOMAIN = 139;

const int SQL_DROP_SCHEMA = 140;

const int SQL_DROP_TABLE = 141;

const int SQL_DROP_TRANSLATION = 142;

const int SQL_DROP_VIEW = 143;

const int SQL_DYNAMIC_CURSOR_ATTRIBUTES1 = 144;

const int SQL_DYNAMIC_CURSOR_ATTRIBUTES2 = 145;

const int SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES1 = 146;

const int SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES2 = 147;

const int SQL_INDEX_KEYWORDS = 148;

const int SQL_INFO_SCHEMA_VIEWS = 149;

const int SQL_KEYSET_CURSOR_ATTRIBUTES1 = 150;

const int SQL_KEYSET_CURSOR_ATTRIBUTES2 = 151;

const int SQL_MAX_ASYNC_CONCURRENT_STATEMENTS = 10022;

const int SQL_ODBC_INTERFACE_CONFORMANCE = 152;

const int SQL_PARAM_ARRAY_ROW_COUNTS = 153;

const int SQL_PARAM_ARRAY_SELECTS = 154;

const int SQL_SCHEMA_TERM = 39;

const int SQL_SCHEMA_USAGE = 91;

const int SQL_SQL92_DATETIME_FUNCTIONS = 155;

const int SQL_SQL92_FOREIGN_KEY_DELETE_RULE = 156;

const int SQL_SQL92_FOREIGN_KEY_UPDATE_RULE = 157;

const int SQL_SQL92_GRANT = 158;

const int SQL_SQL92_NUMERIC_VALUE_FUNCTIONS = 159;

const int SQL_SQL92_PREDICATES = 160;

const int SQL_SQL92_RELATIONAL_JOIN_OPERATORS = 161;

const int SQL_SQL92_REVOKE = 162;

const int SQL_SQL92_ROW_VALUE_CONSTRUCTOR = 163;

const int SQL_SQL92_STRING_FUNCTIONS = 164;

const int SQL_SQL92_VALUE_EXPRESSIONS = 165;

const int SQL_STANDARD_CLI_CONFORMANCE = 166;

const int SQL_STATIC_CURSOR_ATTRIBUTES1 = 167;

const int SQL_STATIC_CURSOR_ATTRIBUTES2 = 168;

const int SQL_AGGREGATE_FUNCTIONS = 169;

const int SQL_DDL_INDEX = 170;

const int SQL_DM_VER = 171;

const int SQL_INSERT_STATEMENT = 172;

const int SQL_UNION_STATEMENT = 96;

const int SQL_ASYNC_DBC_FUNCTIONS = 10023;

const int SQL_DRIVER_AWARE_POOLING_SUPPORTED = 10024;

const int SQL_ASYNC_NOTIFICATION = 10025;

const int SQL_ASYNC_NOTIFICATION_NOT_CAPABLE = 0;

const int SQL_ASYNC_NOTIFICATION_CAPABLE = 1;

const int SQL_DTC_TRANSITION_COST = 1750;

const int SQL_AT_ADD_COLUMN_SINGLE = 32;

const int SQL_AT_ADD_COLUMN_DEFAULT = 64;

const int SQL_AT_ADD_COLUMN_COLLATION = 128;

const int SQL_AT_SET_COLUMN_DEFAULT = 256;

const int SQL_AT_DROP_COLUMN_DEFAULT = 512;

const int SQL_AT_DROP_COLUMN_CASCADE = 1024;

const int SQL_AT_DROP_COLUMN_RESTRICT = 2048;

const int SQL_AT_ADD_TABLE_CONSTRAINT = 4096;

const int SQL_AT_DROP_TABLE_CONSTRAINT_CASCADE = 8192;

const int SQL_AT_DROP_TABLE_CONSTRAINT_RESTRICT = 16384;

const int SQL_AT_CONSTRAINT_NAME_DEFINITION = 32768;

const int SQL_AT_CONSTRAINT_INITIALLY_DEFERRED = 65536;

const int SQL_AT_CONSTRAINT_INITIALLY_IMMEDIATE = 131072;

const int SQL_AT_CONSTRAINT_DEFERRABLE = 262144;

const int SQL_AT_CONSTRAINT_NON_DEFERRABLE = 524288;

const int SQL_CVT_CHAR = 1;

const int SQL_CVT_NUMERIC = 2;

const int SQL_CVT_DECIMAL = 4;

const int SQL_CVT_INTEGER = 8;

const int SQL_CVT_SMALLINT = 16;

const int SQL_CVT_FLOAT = 32;

const int SQL_CVT_REAL = 64;

const int SQL_CVT_DOUBLE = 128;

const int SQL_CVT_VARCHAR = 256;

const int SQL_CVT_LONGVARCHAR = 512;

const int SQL_CVT_BINARY = 1024;

const int SQL_CVT_VARBINARY = 2048;

const int SQL_CVT_BIT = 4096;

const int SQL_CVT_TINYINT = 8192;

const int SQL_CVT_BIGINT = 16384;

const int SQL_CVT_DATE = 32768;

const int SQL_CVT_TIME = 65536;

const int SQL_CVT_TIMESTAMP = 131072;

const int SQL_CVT_LONGVARBINARY = 262144;

const int SQL_CVT_INTERVAL_YEAR_MONTH = 524288;

const int SQL_CVT_INTERVAL_DAY_TIME = 1048576;

const int SQL_CVT_WCHAR = 2097152;

const int SQL_CVT_WLONGVARCHAR = 4194304;

const int SQL_CVT_WVARCHAR = 8388608;

const int SQL_CVT_GUID = 16777216;

const int SQL_FN_CVT_CONVERT = 1;

const int SQL_FN_CVT_CAST = 2;

const int SQL_FN_STR_CONCAT = 1;

const int SQL_FN_STR_INSERT = 2;

const int SQL_FN_STR_LEFT = 4;

const int SQL_FN_STR_LTRIM = 8;

const int SQL_FN_STR_LENGTH = 16;

const int SQL_FN_STR_LOCATE = 32;

const int SQL_FN_STR_LCASE = 64;

const int SQL_FN_STR_REPEAT = 128;

const int SQL_FN_STR_REPLACE = 256;

const int SQL_FN_STR_RIGHT = 512;

const int SQL_FN_STR_RTRIM = 1024;

const int SQL_FN_STR_SUBSTRING = 2048;

const int SQL_FN_STR_UCASE = 4096;

const int SQL_FN_STR_ASCII = 8192;

const int SQL_FN_STR_CHAR = 16384;

const int SQL_FN_STR_DIFFERENCE = 32768;

const int SQL_FN_STR_LOCATE_2 = 65536;

const int SQL_FN_STR_SOUNDEX = 131072;

const int SQL_FN_STR_SPACE = 262144;

const int SQL_FN_STR_BIT_LENGTH = 524288;

const int SQL_FN_STR_CHAR_LENGTH = 1048576;

const int SQL_FN_STR_CHARACTER_LENGTH = 2097152;

const int SQL_FN_STR_OCTET_LENGTH = 4194304;

const int SQL_FN_STR_POSITION = 8388608;

const int SQL_SSF_CONVERT = 1;

const int SQL_SSF_LOWER = 2;

const int SQL_SSF_UPPER = 4;

const int SQL_SSF_SUBSTRING = 8;

const int SQL_SSF_TRANSLATE = 16;

const int SQL_SSF_TRIM_BOTH = 32;

const int SQL_SSF_TRIM_LEADING = 64;

const int SQL_SSF_TRIM_TRAILING = 128;

const int SQL_FN_NUM_ABS = 1;

const int SQL_FN_NUM_ACOS = 2;

const int SQL_FN_NUM_ASIN = 4;

const int SQL_FN_NUM_ATAN = 8;

const int SQL_FN_NUM_ATAN2 = 16;

const int SQL_FN_NUM_CEILING = 32;

const int SQL_FN_NUM_COS = 64;

const int SQL_FN_NUM_COT = 128;

const int SQL_FN_NUM_EXP = 256;

const int SQL_FN_NUM_FLOOR = 512;

const int SQL_FN_NUM_LOG = 1024;

const int SQL_FN_NUM_MOD = 2048;

const int SQL_FN_NUM_SIGN = 4096;

const int SQL_FN_NUM_SIN = 8192;

const int SQL_FN_NUM_SQRT = 16384;

const int SQL_FN_NUM_TAN = 32768;

const int SQL_FN_NUM_PI = 65536;

const int SQL_FN_NUM_RAND = 131072;

const int SQL_FN_NUM_DEGREES = 262144;

const int SQL_FN_NUM_LOG10 = 524288;

const int SQL_FN_NUM_POWER = 1048576;

const int SQL_FN_NUM_RADIANS = 2097152;

const int SQL_FN_NUM_ROUND = 4194304;

const int SQL_FN_NUM_TRUNCATE = 8388608;

const int SQL_SNVF_BIT_LENGTH = 1;

const int SQL_SNVF_CHAR_LENGTH = 2;

const int SQL_SNVF_CHARACTER_LENGTH = 4;

const int SQL_SNVF_EXTRACT = 8;

const int SQL_SNVF_OCTET_LENGTH = 16;

const int SQL_SNVF_POSITION = 32;

const int SQL_FN_TD_NOW = 1;

const int SQL_FN_TD_CURDATE = 2;

const int SQL_FN_TD_DAYOFMONTH = 4;

const int SQL_FN_TD_DAYOFWEEK = 8;

const int SQL_FN_TD_DAYOFYEAR = 16;

const int SQL_FN_TD_MONTH = 32;

const int SQL_FN_TD_QUARTER = 64;

const int SQL_FN_TD_WEEK = 128;

const int SQL_FN_TD_YEAR = 256;

const int SQL_FN_TD_CURTIME = 512;

const int SQL_FN_TD_HOUR = 1024;

const int SQL_FN_TD_MINUTE = 2048;

const int SQL_FN_TD_SECOND = 4096;

const int SQL_FN_TD_TIMESTAMPADD = 8192;

const int SQL_FN_TD_TIMESTAMPDIFF = 16384;

const int SQL_FN_TD_DAYNAME = 32768;

const int SQL_FN_TD_MONTHNAME = 65536;

const int SQL_FN_TD_CURRENT_DATE = 131072;

const int SQL_FN_TD_CURRENT_TIME = 262144;

const int SQL_FN_TD_CURRENT_TIMESTAMP = 524288;

const int SQL_FN_TD_EXTRACT = 1048576;

const int SQL_SDF_CURRENT_DATE = 1;

const int SQL_SDF_CURRENT_TIME = 2;

const int SQL_SDF_CURRENT_TIMESTAMP = 4;

const int SQL_FN_SYS_USERNAME = 1;

const int SQL_FN_SYS_DBNAME = 2;

const int SQL_FN_SYS_IFNULL = 4;

const int SQL_FN_TSI_FRAC_SECOND = 1;

const int SQL_FN_TSI_SECOND = 2;

const int SQL_FN_TSI_MINUTE = 4;

const int SQL_FN_TSI_HOUR = 8;

const int SQL_FN_TSI_DAY = 16;

const int SQL_FN_TSI_WEEK = 32;

const int SQL_FN_TSI_MONTH = 64;

const int SQL_FN_TSI_QUARTER = 128;

const int SQL_FN_TSI_YEAR = 256;

const int SQL_CA1_NEXT = 1;

const int SQL_CA1_ABSOLUTE = 2;

const int SQL_CA1_RELATIVE = 4;

const int SQL_CA1_BOOKMARK = 8;

const int SQL_CA1_LOCK_NO_CHANGE = 64;

const int SQL_CA1_LOCK_EXCLUSIVE = 128;

const int SQL_CA1_LOCK_UNLOCK = 256;

const int SQL_CA1_POS_POSITION = 512;

const int SQL_CA1_POS_UPDATE = 1024;

const int SQL_CA1_POS_DELETE = 2048;

const int SQL_CA1_POS_REFRESH = 4096;

const int SQL_CA1_POSITIONED_UPDATE = 8192;

const int SQL_CA1_POSITIONED_DELETE = 16384;

const int SQL_CA1_SELECT_FOR_UPDATE = 32768;

const int SQL_CA1_BULK_ADD = 65536;

const int SQL_CA1_BULK_UPDATE_BY_BOOKMARK = 131072;

const int SQL_CA1_BULK_DELETE_BY_BOOKMARK = 262144;

const int SQL_CA1_BULK_FETCH_BY_BOOKMARK = 524288;

const int SQL_CA2_READ_ONLY_CONCURRENCY = 1;

const int SQL_CA2_LOCK_CONCURRENCY = 2;

const int SQL_CA2_OPT_ROWVER_CONCURRENCY = 4;

const int SQL_CA2_OPT_VALUES_CONCURRENCY = 8;

const int SQL_CA2_SENSITIVITY_ADDITIONS = 16;

const int SQL_CA2_SENSITIVITY_DELETIONS = 32;

const int SQL_CA2_SENSITIVITY_UPDATES = 64;

const int SQL_CA2_MAX_ROWS_SELECT = 128;

const int SQL_CA2_MAX_ROWS_INSERT = 256;

const int SQL_CA2_MAX_ROWS_DELETE = 512;

const int SQL_CA2_MAX_ROWS_UPDATE = 1024;

const int SQL_CA2_MAX_ROWS_CATALOG = 2048;

const int SQL_CA2_MAX_ROWS_AFFECTS_ALL = 3968;

const int SQL_CA2_CRC_EXACT = 4096;

const int SQL_CA2_CRC_APPROXIMATE = 8192;

const int SQL_CA2_SIMULATE_NON_UNIQUE = 16384;

const int SQL_CA2_SIMULATE_TRY_UNIQUE = 32768;

const int SQL_CA2_SIMULATE_UNIQUE = 65536;

const int SQL_OAC_NONE = 0;

const int SQL_OAC_LEVEL1 = 1;

const int SQL_OAC_LEVEL2 = 2;

const int SQL_OSCC_NOT_COMPLIANT = 0;

const int SQL_OSCC_COMPLIANT = 1;

const int SQL_OSC_MINIMUM = 0;

const int SQL_OSC_CORE = 1;

const int SQL_OSC_EXTENDED = 2;

const int SQL_CB_NULL = 0;

const int SQL_CB_NON_NULL = 1;

const int SQL_SO_FORWARD_ONLY = 1;

const int SQL_SO_KEYSET_DRIVEN = 2;

const int SQL_SO_DYNAMIC = 4;

const int SQL_SO_MIXED = 8;

const int SQL_SO_STATIC = 16;

const int SQL_FD_FETCH_BOOKMARK = 128;

const int SQL_CN_NONE = 0;

const int SQL_CN_DIFFERENT = 1;

const int SQL_CN_ANY = 2;

const int SQL_NNC_NULL = 0;

const int SQL_NNC_NON_NULL = 1;

const int SQL_NC_START = 2;

const int SQL_NC_END = 4;

const int SQL_FILE_NOT_SUPPORTED = 0;

const int SQL_FILE_TABLE = 1;

const int SQL_FILE_QUALIFIER = 2;

const int SQL_FILE_CATALOG = 2;

const int SQL_GD_BLOCK = 4;

const int SQL_GD_BOUND = 8;

const int SQL_GD_OUTPUT_PARAMS = 16;

const int SQL_PS_POSITIONED_DELETE = 1;

const int SQL_PS_POSITIONED_UPDATE = 2;

const int SQL_PS_SELECT_FOR_UPDATE = 4;

const int SQL_GB_NOT_SUPPORTED = 0;

const int SQL_GB_GROUP_BY_EQUALS_SELECT = 1;

const int SQL_GB_GROUP_BY_CONTAINS_SELECT = 2;

const int SQL_GB_NO_RELATION = 3;

const int SQL_GB_COLLATE = 4;

const int SQL_OU_DML_STATEMENTS = 1;

const int SQL_OU_PROCEDURE_INVOCATION = 2;

const int SQL_OU_TABLE_DEFINITION = 4;

const int SQL_OU_INDEX_DEFINITION = 8;

const int SQL_OU_PRIVILEGE_DEFINITION = 16;

const int SQL_SU_DML_STATEMENTS = 1;

const int SQL_SU_PROCEDURE_INVOCATION = 2;

const int SQL_SU_TABLE_DEFINITION = 4;

const int SQL_SU_INDEX_DEFINITION = 8;

const int SQL_SU_PRIVILEGE_DEFINITION = 16;

const int SQL_QU_DML_STATEMENTS = 1;

const int SQL_QU_PROCEDURE_INVOCATION = 2;

const int SQL_QU_TABLE_DEFINITION = 4;

const int SQL_QU_INDEX_DEFINITION = 8;

const int SQL_QU_PRIVILEGE_DEFINITION = 16;

const int SQL_CU_DML_STATEMENTS = 1;

const int SQL_CU_PROCEDURE_INVOCATION = 2;

const int SQL_CU_TABLE_DEFINITION = 4;

const int SQL_CU_INDEX_DEFINITION = 8;

const int SQL_CU_PRIVILEGE_DEFINITION = 16;

const int SQL_SQ_COMPARISON = 1;

const int SQL_SQ_EXISTS = 2;

const int SQL_SQ_IN = 4;

const int SQL_SQ_QUANTIFIED = 8;

const int SQL_SQ_CORRELATED_SUBQUERIES = 16;

const int SQL_U_UNION = 1;

const int SQL_U_UNION_ALL = 2;

const int SQL_BP_CLOSE = 1;

const int SQL_BP_DELETE = 2;

const int SQL_BP_DROP = 4;

const int SQL_BP_TRANSACTION = 8;

const int SQL_BP_UPDATE = 16;

const int SQL_BP_OTHER_HSTMT = 32;

const int SQL_BP_SCROLL = 64;

const int SQL_SS_ADDITIONS = 1;

const int SQL_SS_DELETIONS = 2;

const int SQL_SS_UPDATES = 4;

const int SQL_CV_CREATE_VIEW = 1;

const int SQL_CV_CHECK_OPTION = 2;

const int SQL_CV_CASCADED = 4;

const int SQL_CV_LOCAL = 8;

const int SQL_LCK_NO_CHANGE = 1;

const int SQL_LCK_EXCLUSIVE = 2;

const int SQL_LCK_UNLOCK = 4;

const int SQL_POS_POSITION = 1;

const int SQL_POS_REFRESH = 2;

const int SQL_POS_UPDATE = 4;

const int SQL_POS_DELETE = 8;

const int SQL_POS_ADD = 16;

const int SQL_QL_START = 1;

const int SQL_QL_END = 2;

const int SQL_AF_AVG = 1;

const int SQL_AF_COUNT = 2;

const int SQL_AF_MAX = 4;

const int SQL_AF_MIN = 8;

const int SQL_AF_SUM = 16;

const int SQL_AF_DISTINCT = 32;

const int SQL_AF_ALL = 64;

const int SQL_SC_SQL92_ENTRY = 1;

const int SQL_SC_FIPS127_2_TRANSITIONAL = 2;

const int SQL_SC_SQL92_INTERMEDIATE = 4;

const int SQL_SC_SQL92_FULL = 8;

const int SQL_DL_SQL92_DATE = 1;

const int SQL_DL_SQL92_TIME = 2;

const int SQL_DL_SQL92_TIMESTAMP = 4;

const int SQL_DL_SQL92_INTERVAL_YEAR = 8;

const int SQL_DL_SQL92_INTERVAL_MONTH = 16;

const int SQL_DL_SQL92_INTERVAL_DAY = 32;

const int SQL_DL_SQL92_INTERVAL_HOUR = 64;

const int SQL_DL_SQL92_INTERVAL_MINUTE = 128;

const int SQL_DL_SQL92_INTERVAL_SECOND = 256;

const int SQL_DL_SQL92_INTERVAL_YEAR_TO_MONTH = 512;

const int SQL_DL_SQL92_INTERVAL_DAY_TO_HOUR = 1024;

const int SQL_DL_SQL92_INTERVAL_DAY_TO_MINUTE = 2048;

const int SQL_DL_SQL92_INTERVAL_DAY_TO_SECOND = 4096;

const int SQL_DL_SQL92_INTERVAL_HOUR_TO_MINUTE = 8192;

const int SQL_DL_SQL92_INTERVAL_HOUR_TO_SECOND = 16384;

const int SQL_DL_SQL92_INTERVAL_MINUTE_TO_SECOND = 32768;

const int SQL_CL_START = 1;

const int SQL_CL_END = 2;

const int SQL_BRC_PROCEDURES = 1;

const int SQL_BRC_EXPLICIT = 2;

const int SQL_BRC_ROLLED_UP = 4;

const int SQL_BS_SELECT_EXPLICIT = 1;

const int SQL_BS_ROW_COUNT_EXPLICIT = 2;

const int SQL_BS_SELECT_PROC = 4;

const int SQL_BS_ROW_COUNT_PROC = 8;

const int SQL_PARC_BATCH = 1;

const int SQL_PARC_NO_BATCH = 2;

const int SQL_PAS_BATCH = 1;

const int SQL_PAS_NO_BATCH = 2;

const int SQL_PAS_NO_SELECT = 3;

const int SQL_IK_NONE = 0;

const int SQL_IK_ASC = 1;

const int SQL_IK_DESC = 2;

const int SQL_IK_ALL = 3;

const int SQL_ISV_ASSERTIONS = 1;

const int SQL_ISV_CHARACTER_SETS = 2;

const int SQL_ISV_CHECK_CONSTRAINTS = 4;

const int SQL_ISV_COLLATIONS = 8;

const int SQL_ISV_COLUMN_DOMAIN_USAGE = 16;

const int SQL_ISV_COLUMN_PRIVILEGES = 32;

const int SQL_ISV_COLUMNS = 64;

const int SQL_ISV_CONSTRAINT_COLUMN_USAGE = 128;

const int SQL_ISV_CONSTRAINT_TABLE_USAGE = 256;

const int SQL_ISV_DOMAIN_CONSTRAINTS = 512;

const int SQL_ISV_DOMAINS = 1024;

const int SQL_ISV_KEY_COLUMN_USAGE = 2048;

const int SQL_ISV_REFERENTIAL_CONSTRAINTS = 4096;

const int SQL_ISV_SCHEMATA = 8192;

const int SQL_ISV_SQL_LANGUAGES = 16384;

const int SQL_ISV_TABLE_CONSTRAINTS = 32768;

const int SQL_ISV_TABLE_PRIVILEGES = 65536;

const int SQL_ISV_TABLES = 131072;

const int SQL_ISV_TRANSLATIONS = 262144;

const int SQL_ISV_USAGE_PRIVILEGES = 524288;

const int SQL_ISV_VIEW_COLUMN_USAGE = 1048576;

const int SQL_ISV_VIEW_TABLE_USAGE = 2097152;

const int SQL_ISV_VIEWS = 4194304;

const int SQL_AD_CONSTRAINT_NAME_DEFINITION = 1;

const int SQL_AD_ADD_DOMAIN_CONSTRAINT = 2;

const int SQL_AD_DROP_DOMAIN_CONSTRAINT = 4;

const int SQL_AD_ADD_DOMAIN_DEFAULT = 8;

const int SQL_AD_DROP_DOMAIN_DEFAULT = 16;

const int SQL_AD_ADD_CONSTRAINT_INITIALLY_DEFERRED = 32;

const int SQL_AD_ADD_CONSTRAINT_INITIALLY_IMMEDIATE = 64;

const int SQL_AD_ADD_CONSTRAINT_DEFERRABLE = 128;

const int SQL_AD_ADD_CONSTRAINT_NON_DEFERRABLE = 256;

const int SQL_CS_CREATE_SCHEMA = 1;

const int SQL_CS_AUTHORIZATION = 2;

const int SQL_CS_DEFAULT_CHARACTER_SET = 4;

const int SQL_CTR_CREATE_TRANSLATION = 1;

const int SQL_CA_CREATE_ASSERTION = 1;

const int SQL_CA_CONSTRAINT_INITIALLY_DEFERRED = 16;

const int SQL_CA_CONSTRAINT_INITIALLY_IMMEDIATE = 32;

const int SQL_CA_CONSTRAINT_DEFERRABLE = 64;

const int SQL_CA_CONSTRAINT_NON_DEFERRABLE = 128;

const int SQL_CCS_CREATE_CHARACTER_SET = 1;

const int SQL_CCS_COLLATE_CLAUSE = 2;

const int SQL_CCS_LIMITED_COLLATION = 4;

const int SQL_CCOL_CREATE_COLLATION = 1;

const int SQL_CDO_CREATE_DOMAIN = 1;

const int SQL_CDO_DEFAULT = 2;

const int SQL_CDO_CONSTRAINT = 4;

const int SQL_CDO_COLLATION = 8;

const int SQL_CDO_CONSTRAINT_NAME_DEFINITION = 16;

const int SQL_CDO_CONSTRAINT_INITIALLY_DEFERRED = 32;

const int SQL_CDO_CONSTRAINT_INITIALLY_IMMEDIATE = 64;

const int SQL_CDO_CONSTRAINT_DEFERRABLE = 128;

const int SQL_CDO_CONSTRAINT_NON_DEFERRABLE = 256;

const int SQL_CT_CREATE_TABLE = 1;

const int SQL_CT_COMMIT_PRESERVE = 2;

const int SQL_CT_COMMIT_DELETE = 4;

const int SQL_CT_GLOBAL_TEMPORARY = 8;

const int SQL_CT_LOCAL_TEMPORARY = 16;

const int SQL_CT_CONSTRAINT_INITIALLY_DEFERRED = 32;

const int SQL_CT_CONSTRAINT_INITIALLY_IMMEDIATE = 64;

const int SQL_CT_CONSTRAINT_DEFERRABLE = 128;

const int SQL_CT_CONSTRAINT_NON_DEFERRABLE = 256;

const int SQL_CT_COLUMN_CONSTRAINT = 512;

const int SQL_CT_COLUMN_DEFAULT = 1024;

const int SQL_CT_COLUMN_COLLATION = 2048;

const int SQL_CT_TABLE_CONSTRAINT = 4096;

const int SQL_CT_CONSTRAINT_NAME_DEFINITION = 8192;

const int SQL_DI_CREATE_INDEX = 1;

const int SQL_DI_DROP_INDEX = 2;

const int SQL_DC_DROP_COLLATION = 1;

const int SQL_DD_DROP_DOMAIN = 1;

const int SQL_DD_RESTRICT = 2;

const int SQL_DD_CASCADE = 4;

const int SQL_DS_DROP_SCHEMA = 1;

const int SQL_DS_RESTRICT = 2;

const int SQL_DS_CASCADE = 4;

const int SQL_DCS_DROP_CHARACTER_SET = 1;

const int SQL_DA_DROP_ASSERTION = 1;

const int SQL_DT_DROP_TABLE = 1;

const int SQL_DT_RESTRICT = 2;

const int SQL_DT_CASCADE = 4;

const int SQL_DTR_DROP_TRANSLATION = 1;

const int SQL_DV_DROP_VIEW = 1;

const int SQL_DV_RESTRICT = 2;

const int SQL_DV_CASCADE = 4;

const int SQL_IS_INSERT_LITERALS = 1;

const int SQL_IS_INSERT_SEARCHED = 2;

const int SQL_IS_SELECT_INTO = 4;

const int SQL_OIC_CORE = 1;

const int SQL_OIC_LEVEL1 = 2;

const int SQL_OIC_LEVEL2 = 3;

const int SQL_SFKD_CASCADE = 1;

const int SQL_SFKD_NO_ACTION = 2;

const int SQL_SFKD_SET_DEFAULT = 4;

const int SQL_SFKD_SET_NULL = 8;

const int SQL_SFKU_CASCADE = 1;

const int SQL_SFKU_NO_ACTION = 2;

const int SQL_SFKU_SET_DEFAULT = 4;

const int SQL_SFKU_SET_NULL = 8;

const int SQL_SG_USAGE_ON_DOMAIN = 1;

const int SQL_SG_USAGE_ON_CHARACTER_SET = 2;

const int SQL_SG_USAGE_ON_COLLATION = 4;

const int SQL_SG_USAGE_ON_TRANSLATION = 8;

const int SQL_SG_WITH_GRANT_OPTION = 16;

const int SQL_SG_DELETE_TABLE = 32;

const int SQL_SG_INSERT_TABLE = 64;

const int SQL_SG_INSERT_COLUMN = 128;

const int SQL_SG_REFERENCES_TABLE = 256;

const int SQL_SG_REFERENCES_COLUMN = 512;

const int SQL_SG_SELECT_TABLE = 1024;

const int SQL_SG_UPDATE_TABLE = 2048;

const int SQL_SG_UPDATE_COLUMN = 4096;

const int SQL_SP_EXISTS = 1;

const int SQL_SP_ISNOTNULL = 2;

const int SQL_SP_ISNULL = 4;

const int SQL_SP_MATCH_FULL = 8;

const int SQL_SP_MATCH_PARTIAL = 16;

const int SQL_SP_MATCH_UNIQUE_FULL = 32;

const int SQL_SP_MATCH_UNIQUE_PARTIAL = 64;

const int SQL_SP_OVERLAPS = 128;

const int SQL_SP_UNIQUE = 256;

const int SQL_SP_LIKE = 512;

const int SQL_SP_IN = 1024;

const int SQL_SP_BETWEEN = 2048;

const int SQL_SP_COMPARISON = 4096;

const int SQL_SP_QUANTIFIED_COMPARISON = 8192;

const int SQL_SRJO_CORRESPONDING_CLAUSE = 1;

const int SQL_SRJO_CROSS_JOIN = 2;

const int SQL_SRJO_EXCEPT_JOIN = 4;

const int SQL_SRJO_FULL_OUTER_JOIN = 8;

const int SQL_SRJO_INNER_JOIN = 16;

const int SQL_SRJO_INTERSECT_JOIN = 32;

const int SQL_SRJO_LEFT_OUTER_JOIN = 64;

const int SQL_SRJO_NATURAL_JOIN = 128;

const int SQL_SRJO_RIGHT_OUTER_JOIN = 256;

const int SQL_SRJO_UNION_JOIN = 512;

const int SQL_SR_USAGE_ON_DOMAIN = 1;

const int SQL_SR_USAGE_ON_CHARACTER_SET = 2;

const int SQL_SR_USAGE_ON_COLLATION = 4;

const int SQL_SR_USAGE_ON_TRANSLATION = 8;

const int SQL_SR_GRANT_OPTION_FOR = 16;

const int SQL_SR_CASCADE = 32;

const int SQL_SR_RESTRICT = 64;

const int SQL_SR_DELETE_TABLE = 128;

const int SQL_SR_INSERT_TABLE = 256;

const int SQL_SR_INSERT_COLUMN = 512;

const int SQL_SR_REFERENCES_TABLE = 1024;

const int SQL_SR_REFERENCES_COLUMN = 2048;

const int SQL_SR_SELECT_TABLE = 4096;

const int SQL_SR_UPDATE_TABLE = 8192;

const int SQL_SR_UPDATE_COLUMN = 16384;

const int SQL_SRVC_VALUE_EXPRESSION = 1;

const int SQL_SRVC_NULL = 2;

const int SQL_SRVC_DEFAULT = 4;

const int SQL_SRVC_ROW_SUBQUERY = 8;

const int SQL_SVE_CASE = 1;

const int SQL_SVE_CAST = 2;

const int SQL_SVE_COALESCE = 4;

const int SQL_SVE_NULLIF = 8;

const int SQL_SCC_XOPEN_CLI_VERSION1 = 1;

const int SQL_SCC_ISO92_CLI = 2;

const int SQL_US_UNION = 1;

const int SQL_US_UNION_ALL = 2;

const int SQL_DRIVER_AWARE_POOLING_NOT_CAPABLE = 0;

const int SQL_DRIVER_AWARE_POOLING_CAPABLE = 1;

const int SQL_DTC_ENLIST_EXPENSIVE = 1;

const int SQL_DTC_UNENLIST_EXPENSIVE = 2;

const int SQL_ASYNC_DBC_NOT_CAPABLE = 0;

const int SQL_ASYNC_DBC_CAPABLE = 1;

const int SQL_FETCH_FIRST_USER = 31;

const int SQL_FETCH_FIRST_SYSTEM = 32;

const int SQL_ENTIRE_ROWSET = 0;

const int SQL_POSITION = 0;

const int SQL_REFRESH = 1;

const int SQL_UPDATE = 2;

const int SQL_DELETE = 3;

const int SQL_ADD = 4;

const int SQL_SETPOS_MAX_OPTION_VALUE = 4;

const int SQL_UPDATE_BY_BOOKMARK = 5;

const int SQL_DELETE_BY_BOOKMARK = 6;

const int SQL_FETCH_BY_BOOKMARK = 7;

const int SQL_LOCK_NO_CHANGE = 0;

const int SQL_LOCK_EXCLUSIVE = 1;

const int SQL_LOCK_UNLOCK = 2;

const int SQL_SETPOS_MAX_LOCK_VALUE = 2;

const int SQL_BEST_ROWID = 1;

const int SQL_ROWVER = 2;

const int SQL_PC_NOT_PSEUDO = 1;

const int SQL_QUICK = 0;

const int SQL_ENSURE = 1;

const int SQL_TABLE_STAT = 0;

const String SQL_ALL_CATALOGS = '%';

const String SQL_ALL_SCHEMAS = '%';

const String SQL_ALL_TABLE_TYPES = '%';

const int SQL_DRIVER_NOPROMPT = 0;

const int SQL_DRIVER_COMPLETE = 1;

const int SQL_DRIVER_PROMPT = 2;

const int SQL_DRIVER_COMPLETE_REQUIRED = 3;

const int SQL_FETCH_BOOKMARK = 8;

const int SQL_ROW_SUCCESS = 0;

const int SQL_ROW_DELETED = 1;

const int SQL_ROW_UPDATED = 2;

const int SQL_ROW_NOROW = 3;

const int SQL_ROW_ADDED = 4;

const int SQL_ROW_ERROR = 5;

const int SQL_ROW_SUCCESS_WITH_INFO = 6;

const int SQL_ROW_PROCEED = 0;

const int SQL_ROW_IGNORE = 1;

const int SQL_PARAM_SUCCESS = 0;

const int SQL_PARAM_SUCCESS_WITH_INFO = 6;

const int SQL_PARAM_ERROR = 5;

const int SQL_PARAM_UNUSED = 7;

const int SQL_PARAM_DIAG_UNAVAILABLE = 1;

const int SQL_PARAM_PROCEED = 0;

const int SQL_PARAM_IGNORE = 1;

const int SQL_CASCADE = 0;

const int SQL_RESTRICT = 1;

const int SQL_SET_NULL = 2;

const int SQL_NO_ACTION = 3;

const int SQL_SET_DEFAULT = 4;

const int SQL_INITIALLY_DEFERRED = 5;

const int SQL_INITIALLY_IMMEDIATE = 6;

const int SQL_NOT_DEFERRABLE = 7;

const int SQL_PARAM_TYPE_UNKNOWN = 0;

const int SQL_PARAM_INPUT = 1;

const int SQL_PARAM_INPUT_OUTPUT = 2;

const int SQL_RESULT_COL = 3;

const int SQL_PARAM_OUTPUT = 4;

const int SQL_RETURN_VALUE = 5;

const int SQL_PARAM_INPUT_OUTPUT_STREAM = 8;

const int SQL_PARAM_OUTPUT_STREAM = 16;

const int SQL_PT_UNKNOWN = 0;

const int SQL_PT_PROCEDURE = 1;

const int SQL_PT_FUNCTION = 2;

const String SQL_ODBC_KEYWORDS =
    'ABSOLUTE,ACTION,ADA,ADD,ALL,ALLOCATE,ALTER,AND,ANY,ARE,AS,ASC,ASSERTION,AT,AUTHORIZATION,AVG,BEGIN,BETWEEN,BIT,BIT_LENGTH,BOTH,BY,CASCADE,CASCADED,CASE,CAST,CATALOG,CHAR,CHAR_LENGTH,CHARACTER,CHARACTER_LENGTH,CHECK,CLOSE,COALESCE,COLLATE,COLLATION,COLUMN,COMMIT,CONNECT,CONNECTION,CONSTRAINT,CONSTRAINTS,CONTINUE,CONVERT,CORRESPONDING,COUNT,CREATE,CROSS,CURRENT,CURRENT_DATE,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_USER,CURSOR,DATE,DAY,DEALLOCATE,DEC,DECIMAL,DECLARE,DEFAULT,DEFERRABLE,DEFERRED,DELETE,DESC,DESCRIBE,DESCRIPTOR,DIAGNOSTICS,DISCONNECT,DISTINCT,DOMAIN,DOUBLE,DROP,ELSE,END,END-EXEC,ESCAPE,EXCEPT,EXCEPTION,EXEC,EXECUTE,EXISTS,EXTERNAL,EXTRACT,FALSE,FETCH,FIRST,FLOAT,FOR,FOREIGN,FORTRAN,FOUND,FROM,FULL,GET,GLOBAL,GO,GOTO,GRANT,GROUP,HAVING,HOUR,IDENTITY,IMMEDIATE,IN,INCLUDE,INDEX,INDICATOR,INITIALLY,INNER,INPUT,INSENSITIVE,INSERT,INT,INTEGER,INTERSECT,INTERVAL,INTO,IS,ISOLATION,JOIN,KEY,LANGUAGE,LAST,LEADING,LEFT,LEVEL,LIKE,LOCAL,LOWER,MATCH,MAX,MIN,MINUTE,MODULE,MONTH,NAMES,NATIONAL,NATURAL,NCHAR,NEXT,NO,NONE,NOT,NULL,NULLIF,NUMERIC,OCTET_LENGTH,OF,ON,ONLY,OPEN,OPTION,OR,ORDER,OUTER,OUTPUT,OVERLAPS,PAD,PARTIAL,PASCAL,PLI,POSITION,PRECISION,PREPARE,PRESERVE,PRIMARY,PRIOR,PRIVILEGES,PROCEDURE,PUBLIC,READ,REAL,REFERENCES,RELATIVE,RESTRICT,REVOKE,RIGHT,ROLLBACK,ROWSSCHEMA,SCROLL,SECOND,SECTION,SELECT,SESSION,SESSION_USER,SET,SIZE,SMALLINT,SOME,SPACE,SQL,SQLCA,SQLCODE,SQLERROR,SQLSTATE,SQLWARNING,SUBSTRING,SUM,SYSTEM_USER,TABLE,TEMPORARY,THEN,TIME,TIMESTAMP,TIMEZONE_HOUR,TIMEZONE_MINUTE,TO,TRAILING,TRANSACTION,TRANSLATE,TRANSLATION,TRIM,TRUE,UNION,UNIQUE,UNKNOWN,UPDATE,UPPER,USAGE,USER,USING,VALUE,VALUES,VARCHAR,VARYING,VIEW,WHEN,WHENEVER,WHERE,WITH,WORK,WRITE,YEAR,ZONE';

const int SQL_DATABASE_NAME = 16;

const int SQL_FD_FETCH_PREV = 8;

const int SQL_FETCH_PREV = 4;

const int SQL_CONCUR_TIMESTAMP = 3;

const int SQL_SCCO_OPT_TIMESTAMP = 4;

const int SQL_CC_DELETE = 0;

const int SQL_CR_DELETE = 0;

const int SQL_CC_CLOSE = 1;

const int SQL_CR_CLOSE = 1;

const int SQL_CC_PRESERVE = 2;

const int SQL_CR_PRESERVE = 2;

const int SQL_SCROLL_FORWARD_ONLY = 0;

const int SQL_SCROLL_KEYSET_DRIVEN = -1;

const int SQL_SCROLL_DYNAMIC = -2;

const int SQL_SCROLL_STATIC = -3;

const int TRACE_VERSION = 1000;

const int TRACE_ON = 1;

const int TRACE_VS_EVENT_ON = 2;

const int ODBC_VS_FLAG_UNICODE_ARG = 1;

const int ODBC_VS_FLAG_UNICODE_COR = 2;

const int ODBC_VS_FLAG_RETCODE = 4;

const int ODBC_VS_FLAG_STOP = 8;

const int SQL_WCHAR = -8;

const int SQL_WVARCHAR = -9;

const int SQL_WLONGVARCHAR = -10;

const int SQL_C_WCHAR = -8;

const int SQL_C_TCHAR = 1;

const int SQL_SQLSTATE_SIZEW = 10;
